{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Important BulletBot is in the process of being merged with another discord bot called Bottius . Their merging will result in the creation of a new bot called Botler . Because of this, all development on BulletBot has been dropped. Until Botler is released, BulletBot will continue to get bug fixes, but will no longer receive feature updates. Who Is BulletBot \u00b6 I'm a general-purpose Discord bot that originated from a webhook problem in the Code Bullet and Co server. During the prelaunch development time, my main creator Codec decided to extend this project to replacing every bot in the server. Currently, I\u2019ve only replaced one entire bot, but also many functions from other bots. Who Is Developing The Bot \u00b6 Currently, as mentioned above, Codec is the main creator, with about 85% of all surviving lines coming from him. The only other coder currently in the team is anAlius , who joined after the bot originally launched. I'm currently being kept running by Bark Ranger , who has also created, and continues to work on, the installers that make it easier to run and set me up on Linux based distributions. Last but not least, is you, the person reading this. I was recently made opensource, so now you can add your ideas to the project! I'm looking forward to seeing all of you make me into a bot overlord who will rule over the world \ud83d\ude43. Because I'm a Discord bot, all contributors are on Discord. There is a server for me that you can join here: Logo/PFP \u00b6 The original logo/PFP was a fanart from @Aster#4205 and was later vectorized by Codec . Original: Vectorized:","title":"Introduction"},{"location":"#who-is-bulletbot","text":"I'm a general-purpose Discord bot that originated from a webhook problem in the Code Bullet and Co server. During the prelaunch development time, my main creator Codec decided to extend this project to replacing every bot in the server. Currently, I\u2019ve only replaced one entire bot, but also many functions from other bots.","title":"Who Is BulletBot"},{"location":"#who-is-developing-the-bot","text":"Currently, as mentioned above, Codec is the main creator, with about 85% of all surviving lines coming from him. The only other coder currently in the team is anAlius , who joined after the bot originally launched. I'm currently being kept running by Bark Ranger , who has also created, and continues to work on, the installers that make it easier to run and set me up on Linux based distributions. Last but not least, is you, the person reading this. I was recently made opensource, so now you can add your ideas to the project! I'm looking forward to seeing all of you make me into a bot overlord who will rule over the world \ud83d\ude43. Because I'm a Discord bot, all contributors are on Discord. There is a server for me that you can join here:","title":"Who Is Developing The Bot"},{"location":"#logopfp","text":"The original logo/PFP was a fanart from @Aster#4205 and was later vectorized by Codec . Original: Vectorized:","title":"Logo/PFP"},{"location":"In-Depth-Explanations/","text":"In Depth Explanations \u00b6 Here we will be looking in-depth at different aspects of BulletBot and the Installers. This document is broken up into two parts: Installers and BulletBot Modules and Code . The \"Installers\" section focuses on all the important things that the installers do. It will go in-depth about how and why it does some of the things it does. The \"BulletBot Modules and Code\" section explains the basic working of the different parts of BulletBot (called modules). This can help you gain a basic overview of the bot. Installers \u00b6 As their name implies, the installers are designed for installing and setting up BulletBot. On top of this, they keep BulletBot up to date by giving users the option to download the newest release, run BulletBot in different run modes, and so on. Important The installers are designed to only work on Linux based systems. Installer Hierarchy \u00b6 Many of the terms used throughout the guides, documentation, and scripts, are things such as \"master installer\", \"sub-master installers\", and \"sub-installers\". They refer to different types/groups of installers that perform specific tasks and execute/are executed by other installers. Master Installer \u00b6 The master installer ( linux-master-installer.sh ) is used for identifying and determining whether BulletBot supports the system it's running on. After confirming that the system is supported, the master installer then executes the sub-master installer that corresponds to it's designed Linux Distribution. Unsupported doesn't mean incompatible Just because the master installer determines that the system is not supported, does not mean that the system is not compatible. What the master installer deems as \"supported\", is an Officially Supported Linux Distribution . These distributions are Linux Distros that BulletBot has been tested and are confirmed to work on. So even if a system is not \"officially supported\", that does not mean that it won't work on that system. Sub-Master Installers \u00b6 The sub-master installers ( centos-rhel-installer.sh and debian-ubuntu-installer.sh ) perform the actual installation and setting up of BulletBot. They install all required prerequisites, assist in setting up BulletBot's config file, and starting BulletBot in different run modes. Because BulletBot is supported on several Linux Distributions that are different in many ways, two sub-master installers had to be created to account for those differences. As the names of each sub-master installer imply, centos-rhel-installer.sh is used on CentOS and RHEL Linux Distros, while debian-ubuntu-installer.sh is used on Debian and Ubuntu Linux Distros. Sub-Installers \u00b6 The sub-installers refer to all the other installers/scripts and are always executed by the sub-master installers. BulletBot System User \u00b6 One thing that the installers do immediately after running for the first time is to create a system user named bulletbot , along with a home directory for that user. It is in this home directory that all of BulletBot's code is stored. There are two main reasons for the creation of this user: The first and major reason is due to security. By creating bulletbot and having that user run services used by/for BulletBot, it is easier to track what each of them is doing. On top of that, any service ran by bulletbot , will only have the permissions required to perform their task (A.K.A., the principle of least privilege). The second reason is that having a home directory where all of BulletBot\u2019s code can be stored, creates a centralized location where one can always expect it to be. This also makes it easier for the end-user, as well as us, in terms of programming. Running BulletBot \u00b6 BulletBot is run by a service called bulletbot.service , which is created when the installers are executed for the first time. Note bulletbot.service should never be enabled. bulletbot.service is run by the bulletbot user. BulletBot has two main methods/modes of running: Run BulletBot in the background with auto-restart \u00b6 This method runs BulletBot in the background of your system. If the system is restarted or shutdown, BulletBot will automatically be started upon system reboot. This run mode is dependent on two files: a service file ( bullet-mongo-start.service ) and a bash script ( bullet-mongo-start.sh ). Bash Script \u00b6 The bash script makes sure that BulletBot is started correctly. A problem we ran into was that if bulletbot.service was enabled, BulletBot would start before the database had fully initialized. It occurred even when bulletbot.service was told to only start after mongod.service started. As a solution, we created this bash script. After being executed by bullet-mongo-start.service , the script waits to make sure that mongod.service successfully started, then waits a little longer to give the database enough time to initialize. Once all that is done, the script will attempt to start bulletbot.service . On top of everything mentioned above, this script also has the capability of sending 'BulletBot Startup Status Reports'. These are sent when BulletBot is being ran in the background with auto-restart. These reports lists whether or not BulletBot was successfully started, the exit status of essential services, and the startup logs of three services that can be used to help identify errors that might have occurred during BulletBot's startup. Though please note that for this feature to work, you need to install third party mailing software. Follow this guide to help you set this feature up. Service File \u00b6 The purpose of the service file is to initiate the auto-restart process. It is done by having the service execute bullet-mongo-start.sh on system reboot. This service is the sole decider of whether or not BulletBot is run with or without auto-restart. When the service is enabled, BulletBot will run WITH auto-restart, but if disabled, it will run WITHOUT auto-restart. Note bullet-mongo-start.service is NOT run by the bulletbot user, because the service needs to run as the root user to allow bullet-mongo-start.sh to start bulletbot.service . Run BulletBot in the background \u00b6 Just like the method above, this method will start bulletbot in the background of the system, except when the system is restarted or shutdown, BulletBot will NOT be started upon system reboot. As mentioned in the description of the service file , if bullet-mongo-start.service is disabled, the run mode will default to this one. This applies even if you specifically started BulletBot with auto-restart. Downloading and Updating BulletBot \u00b6 Every time you download/update BulletBot, the installers will first archive all of BulletBot's code currently in /home/bulletbot/ , to Old_BulletBot/${date} (${date} is the time at which BulletBot's code is archived). Currently, the installers do not manage any of the archives it creates. This means that the number of archives it creates in Old_BulletBot will continue to grow and increase in size. If you would like to remove old archives, you will need to manually delete them. Each are labeled with the date at which they were created (formatted as such: Wed Apr 29 23:28:10 PDT 2020), which will make it easier identifying what archives are old and which ones are new. BulletBot Modules and Code \u00b6 Commands Module \u00b6 This module loads and manages all commands. Its main class is located at src/commands.ts . Commands are stored in two different variables. One is a single array of all commands, and the other is an object structured with subcategories ( strucObject ). The subcategory names in the strucObject are all lowercase, and there is a property named _categoryName which holds the unmodified name of the subcategory. Commands File Structure \u00b6 The Commands module imports the commands based on their location in the commands directory. If they are in a subdirectory, they will be loaded into a subcategory of the subdirectories name. Because of this, the file location and subdirectory names are essential. The actual name of the file holding the command isn't crucial, as the module takes the name specified in the command object. Filters Module \u00b6 The Filters module is build up like the Commands Module. MStats Module \u00b6 MStats module stands for \"management statistics module\", which is responsible for logging statistical data about bot usage to the database. It caches all data and saves it to the database at a certain interval (every 10 seconds). Each hour (at XX:00:01 ), it creates a new hour document to save to. After a day (at 00:00:01 ), it also summarizes the statistics of the last 24 hours and saves it to a day document and also adds its information to an all-time document, which is a summary of all statistical data. The hour documents of the last day will then be deleted from the database, which means the first 24 hours the stats are precise to the hour and after that only to the day. For more information about what the MStats module stores see the database documentation PActions Module \u00b6 The PActions module is responsible for saving time delayed tasks and then executing them. Its name stands for pending Actions . All tasks that are scheduled with this module get saved to the main database in the pActions collection. This is done to ensure that the tasks still get executed when the bot randomly crashes. If nodes native function setTimeout would have been used, there wouldn't have been a way to save this somewhere. The PActions module periodically checks the database for tasks that need to be executed. The interval between checks is defined by the pActionsInterval (in milliseconds) in the bot-config.json file. When a task is executed, PActions will treat the argument differently depending on the tasks action ID, which are defined in the schema.ts file Webhook System \u00b6 Unlike in other bots, where creating a webhook just creates a discord webhook, BulletBot directs the webhook to its server to \"catch\" and then manually sends a message in the channel. This is done so unmentionable Mentions can be used. The bot has one port dedicated to catching webhooks from all services (currently only YouTube). Because each service has it's own data structure when returning webhook data, each service has a custom catcher that listens on a different path. The catcher.ts file only is responsible for creating an express server and getting all catchers for all services. YouTube Webhooks \u00b6 For YouTube webhooks, the bot uses the PubSubHubbub protocol and the hub provided by Google. It only subscribes to every channel once, so if different servers have webhooks for the same channel, the bot will only subscribe the first time. Command Cache \u00b6 Some commands require the user to reply with more information ( ?!abc as an example). To do this, BulletBot uses something called command caches. This allows a command to temporarily store data the user previously provided and also makes the bot send the reply message which doesn't have the prefix with the command to the specific command. For this to also work in DMs, the cache only stores the channel and the user ID, not the server ID. Then each time the bot receives a message, it checks if there is a command cache for that user and channel. If there is one, it will call the command as it normally would but also passes the command cache as a parameter. What the command does with that depends on the command. To check how the command cache document is build up check out the database documentation . Rank/Permission System \u00b6 BulletBot uses a very common rank system where you can add users or roles to a list of a certain rank. There are the following ranks: Bot Master Admin Mod Immune Member By default, every non-admin member is a Member and only members with admin permissions have the Admin rank (without being in the Admin list). In addition to the normal Admin and Mod ranks there is also the Immune rank which can exclude a user from currently non-existent auto-moderation and Bot Master which can only have users in its list and is defined in the botMasters property of the bot-config.json file. Users in that list have the the highest permission level in every server.","title":"In Depth Explanations"},{"location":"In-Depth-Explanations/#in-depth-explanations","text":"Here we will be looking in-depth at different aspects of BulletBot and the Installers. This document is broken up into two parts: Installers and BulletBot Modules and Code . The \"Installers\" section focuses on all the important things that the installers do. It will go in-depth about how and why it does some of the things it does. The \"BulletBot Modules and Code\" section explains the basic working of the different parts of BulletBot (called modules). This can help you gain a basic overview of the bot.","title":"In Depth Explanations"},{"location":"In-Depth-Explanations/#installers","text":"As their name implies, the installers are designed for installing and setting up BulletBot. On top of this, they keep BulletBot up to date by giving users the option to download the newest release, run BulletBot in different run modes, and so on. Important The installers are designed to only work on Linux based systems.","title":"Installers"},{"location":"In-Depth-Explanations/#installer-hierarchy","text":"Many of the terms used throughout the guides, documentation, and scripts, are things such as \"master installer\", \"sub-master installers\", and \"sub-installers\". They refer to different types/groups of installers that perform specific tasks and execute/are executed by other installers.","title":"Installer Hierarchy"},{"location":"In-Depth-Explanations/#master-installer","text":"The master installer ( linux-master-installer.sh ) is used for identifying and determining whether BulletBot supports the system it's running on. After confirming that the system is supported, the master installer then executes the sub-master installer that corresponds to it's designed Linux Distribution. Unsupported doesn't mean incompatible Just because the master installer determines that the system is not supported, does not mean that the system is not compatible. What the master installer deems as \"supported\", is an Officially Supported Linux Distribution . These distributions are Linux Distros that BulletBot has been tested and are confirmed to work on. So even if a system is not \"officially supported\", that does not mean that it won't work on that system.","title":"Master Installer"},{"location":"In-Depth-Explanations/#sub-master-installers","text":"The sub-master installers ( centos-rhel-installer.sh and debian-ubuntu-installer.sh ) perform the actual installation and setting up of BulletBot. They install all required prerequisites, assist in setting up BulletBot's config file, and starting BulletBot in different run modes. Because BulletBot is supported on several Linux Distributions that are different in many ways, two sub-master installers had to be created to account for those differences. As the names of each sub-master installer imply, centos-rhel-installer.sh is used on CentOS and RHEL Linux Distros, while debian-ubuntu-installer.sh is used on Debian and Ubuntu Linux Distros.","title":"Sub-Master Installers"},{"location":"In-Depth-Explanations/#sub-installers","text":"The sub-installers refer to all the other installers/scripts and are always executed by the sub-master installers.","title":"Sub-Installers"},{"location":"In-Depth-Explanations/#bulletbot-system-user","text":"One thing that the installers do immediately after running for the first time is to create a system user named bulletbot , along with a home directory for that user. It is in this home directory that all of BulletBot's code is stored. There are two main reasons for the creation of this user: The first and major reason is due to security. By creating bulletbot and having that user run services used by/for BulletBot, it is easier to track what each of them is doing. On top of that, any service ran by bulletbot , will only have the permissions required to perform their task (A.K.A., the principle of least privilege). The second reason is that having a home directory where all of BulletBot\u2019s code can be stored, creates a centralized location where one can always expect it to be. This also makes it easier for the end-user, as well as us, in terms of programming.","title":"BulletBot System User"},{"location":"In-Depth-Explanations/#running-bulletbot","text":"BulletBot is run by a service called bulletbot.service , which is created when the installers are executed for the first time. Note bulletbot.service should never be enabled. bulletbot.service is run by the bulletbot user. BulletBot has two main methods/modes of running:","title":"Running BulletBot"},{"location":"In-Depth-Explanations/#run-bulletbot-in-the-background-with-auto-restart","text":"This method runs BulletBot in the background of your system. If the system is restarted or shutdown, BulletBot will automatically be started upon system reboot. This run mode is dependent on two files: a service file ( bullet-mongo-start.service ) and a bash script ( bullet-mongo-start.sh ).","title":"Run BulletBot in the background with auto-restart"},{"location":"In-Depth-Explanations/#bash-script","text":"The bash script makes sure that BulletBot is started correctly. A problem we ran into was that if bulletbot.service was enabled, BulletBot would start before the database had fully initialized. It occurred even when bulletbot.service was told to only start after mongod.service started. As a solution, we created this bash script. After being executed by bullet-mongo-start.service , the script waits to make sure that mongod.service successfully started, then waits a little longer to give the database enough time to initialize. Once all that is done, the script will attempt to start bulletbot.service . On top of everything mentioned above, this script also has the capability of sending 'BulletBot Startup Status Reports'. These are sent when BulletBot is being ran in the background with auto-restart. These reports lists whether or not BulletBot was successfully started, the exit status of essential services, and the startup logs of three services that can be used to help identify errors that might have occurred during BulletBot's startup. Though please note that for this feature to work, you need to install third party mailing software. Follow this guide to help you set this feature up.","title":"Bash Script"},{"location":"In-Depth-Explanations/#service-file","text":"The purpose of the service file is to initiate the auto-restart process. It is done by having the service execute bullet-mongo-start.sh on system reboot. This service is the sole decider of whether or not BulletBot is run with or without auto-restart. When the service is enabled, BulletBot will run WITH auto-restart, but if disabled, it will run WITHOUT auto-restart. Note bullet-mongo-start.service is NOT run by the bulletbot user, because the service needs to run as the root user to allow bullet-mongo-start.sh to start bulletbot.service .","title":"Service File"},{"location":"In-Depth-Explanations/#run-bulletbot-in-the-background","text":"Just like the method above, this method will start bulletbot in the background of the system, except when the system is restarted or shutdown, BulletBot will NOT be started upon system reboot. As mentioned in the description of the service file , if bullet-mongo-start.service is disabled, the run mode will default to this one. This applies even if you specifically started BulletBot with auto-restart.","title":"Run BulletBot in the background"},{"location":"In-Depth-Explanations/#downloading-and-updating-bulletbot","text":"Every time you download/update BulletBot, the installers will first archive all of BulletBot's code currently in /home/bulletbot/ , to Old_BulletBot/${date} (${date} is the time at which BulletBot's code is archived). Currently, the installers do not manage any of the archives it creates. This means that the number of archives it creates in Old_BulletBot will continue to grow and increase in size. If you would like to remove old archives, you will need to manually delete them. Each are labeled with the date at which they were created (formatted as such: Wed Apr 29 23:28:10 PDT 2020), which will make it easier identifying what archives are old and which ones are new.","title":"Downloading and Updating BulletBot"},{"location":"In-Depth-Explanations/#bulletbot-modules-and-code","text":"","title":"BulletBot Modules and Code"},{"location":"In-Depth-Explanations/#commands-module","text":"This module loads and manages all commands. Its main class is located at src/commands.ts . Commands are stored in two different variables. One is a single array of all commands, and the other is an object structured with subcategories ( strucObject ). The subcategory names in the strucObject are all lowercase, and there is a property named _categoryName which holds the unmodified name of the subcategory.","title":"Commands Module"},{"location":"In-Depth-Explanations/#commands-file-structure","text":"The Commands module imports the commands based on their location in the commands directory. If they are in a subdirectory, they will be loaded into a subcategory of the subdirectories name. Because of this, the file location and subdirectory names are essential. The actual name of the file holding the command isn't crucial, as the module takes the name specified in the command object.","title":"Commands File Structure"},{"location":"In-Depth-Explanations/#filters-module","text":"The Filters module is build up like the Commands Module.","title":"Filters Module"},{"location":"In-Depth-Explanations/#mstats-module","text":"MStats module stands for \"management statistics module\", which is responsible for logging statistical data about bot usage to the database. It caches all data and saves it to the database at a certain interval (every 10 seconds). Each hour (at XX:00:01 ), it creates a new hour document to save to. After a day (at 00:00:01 ), it also summarizes the statistics of the last 24 hours and saves it to a day document and also adds its information to an all-time document, which is a summary of all statistical data. The hour documents of the last day will then be deleted from the database, which means the first 24 hours the stats are precise to the hour and after that only to the day. For more information about what the MStats module stores see the database documentation","title":"MStats Module"},{"location":"In-Depth-Explanations/#pactions-module","text":"The PActions module is responsible for saving time delayed tasks and then executing them. Its name stands for pending Actions . All tasks that are scheduled with this module get saved to the main database in the pActions collection. This is done to ensure that the tasks still get executed when the bot randomly crashes. If nodes native function setTimeout would have been used, there wouldn't have been a way to save this somewhere. The PActions module periodically checks the database for tasks that need to be executed. The interval between checks is defined by the pActionsInterval (in milliseconds) in the bot-config.json file. When a task is executed, PActions will treat the argument differently depending on the tasks action ID, which are defined in the schema.ts file","title":"PActions Module"},{"location":"In-Depth-Explanations/#webhook-system","text":"Unlike in other bots, where creating a webhook just creates a discord webhook, BulletBot directs the webhook to its server to \"catch\" and then manually sends a message in the channel. This is done so unmentionable Mentions can be used. The bot has one port dedicated to catching webhooks from all services (currently only YouTube). Because each service has it's own data structure when returning webhook data, each service has a custom catcher that listens on a different path. The catcher.ts file only is responsible for creating an express server and getting all catchers for all services.","title":"Webhook System"},{"location":"In-Depth-Explanations/#youtube-webhooks","text":"For YouTube webhooks, the bot uses the PubSubHubbub protocol and the hub provided by Google. It only subscribes to every channel once, so if different servers have webhooks for the same channel, the bot will only subscribe the first time.","title":"YouTube Webhooks"},{"location":"In-Depth-Explanations/#command-cache","text":"Some commands require the user to reply with more information ( ?!abc as an example). To do this, BulletBot uses something called command caches. This allows a command to temporarily store data the user previously provided and also makes the bot send the reply message which doesn't have the prefix with the command to the specific command. For this to also work in DMs, the cache only stores the channel and the user ID, not the server ID. Then each time the bot receives a message, it checks if there is a command cache for that user and channel. If there is one, it will call the command as it normally would but also passes the command cache as a parameter. What the command does with that depends on the command. To check how the command cache document is build up check out the database documentation .","title":"Command Cache"},{"location":"In-Depth-Explanations/#rankpermission-system","text":"BulletBot uses a very common rank system where you can add users or roles to a list of a certain rank. There are the following ranks: Bot Master Admin Mod Immune Member By default, every non-admin member is a Member and only members with admin permissions have the Admin rank (without being in the Admin list). In addition to the normal Admin and Mod ranks there is also the Immune rank which can exclude a user from currently non-existent auto-moderation and Bot Master which can only have users in its list and is defined in the botMasters property of the bot-config.json file. Users in that list have the the highest permission level in every server.","title":"Rank/Permission System"},{"location":"License/","text":"GNU AFFERO GENERAL PUBLIC LICENSE Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. Developers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and/or modify the software. A secondary benefit of defending all users' freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate. Many developers of free software are heartened and encouraged by the resulting cooperation. However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public. The GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community. It requires the operator of a network server to provide the source code of the modified version running there to the users of that server. Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version. An older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals. This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS Definitions. \"This License\" refers to version 3 of the GNU Affero General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. Source Code. The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. Protecting Users' Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. Conveying Verbatim Copies. You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. Additional Terms. \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. Patents. A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. No Surrender of Others' Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. Remote Network Interaction; Use with the GNU General Public License. Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software. This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU Affero General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU Affero General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If your software can interact with users remotely through a computer network, you should also make sure that it provides a way for users to get its source. For example, if your program is a web application, its interface could display a \"Source\" link that leads users to an archive of the code. There are many ways you could offer source, and different solutions will be better for different programs; see section 13 for the specific requirements. You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU AGPL, see https://www.gnu.org/licenses/ .","title":"License"},{"location":"Commands/Commands-Readme/","text":"Commands List Readme \u00b6 This readme will introduce some important/helpful information regarding BulletBot's commands. Required Rank \u00b6 To determine whether or not a user has the necessary permissions to execute one of BulletBot's commands, each command has a required rank (or permission set) that the user must have. All the possible ranks include bot master, admin, mod, and member. Below is a description of each rank and how a user can receive them. Bot Master \u00b6 Bot masters have no restrictions when it comes to using BulletBot. They can perform any command, no matter their server, role, or user-level permissions. Bot masters are added when creating and applying the settings document to the database. Because of this, all users added as a bot master will be recognized as such in any server that the bot is in. Admin \u00b6 Users in the admin rank can use commands that manage the server, as well as any commands that require the mod or member rank. People who already have the admin perms through server roles are automatically given admin rank permissions. If you want to add or remove a user or role from this rank, you can do so using ?!admin [add/rem] [mention/userID] . Mod \u00b6 Users in the mod rank can use commands that moderate the server, as well as those usable by the member rank. Similar to the admin rank, you can add and remove a user or role from this rank using ?!mod [add/rem] [mention/userID] . Immune \u00b6 Users in the immune rank are excluded from the currently non-existent auto-moderation (which will hopefully be added in the future). Just like the ranks above, users can be added and removed from this role via ?!immune [add/rem] [mention/userID] . Member \u00b6 By default, every non-admin user is apart of the member rank. Members have the most basic permissions and can't use any command requiring the bot owner, admin, or mod rank. Important Because ranks such as the bot master, admin, and mod are capable of negating server, role, and user permissions, be careful to whom you give these ranks.","title":"Readme"},{"location":"Commands/Commands-Readme/#commands-list-readme","text":"This readme will introduce some important/helpful information regarding BulletBot's commands.","title":"Commands List Readme"},{"location":"Commands/Commands-Readme/#required-rank","text":"To determine whether or not a user has the necessary permissions to execute one of BulletBot's commands, each command has a required rank (or permission set) that the user must have. All the possible ranks include bot master, admin, mod, and member. Below is a description of each rank and how a user can receive them.","title":"Required Rank"},{"location":"Commands/Commands-Readme/#bot-master","text":"Bot masters have no restrictions when it comes to using BulletBot. They can perform any command, no matter their server, role, or user-level permissions. Bot masters are added when creating and applying the settings document to the database. Because of this, all users added as a bot master will be recognized as such in any server that the bot is in.","title":"Bot Master"},{"location":"Commands/Commands-Readme/#admin","text":"Users in the admin rank can use commands that manage the server, as well as any commands that require the mod or member rank. People who already have the admin perms through server roles are automatically given admin rank permissions. If you want to add or remove a user or role from this rank, you can do so using ?!admin [add/rem] [mention/userID] .","title":"Admin"},{"location":"Commands/Commands-Readme/#mod","text":"Users in the mod rank can use commands that moderate the server, as well as those usable by the member rank. Similar to the admin rank, you can add and remove a user or role from this rank using ?!mod [add/rem] [mention/userID] .","title":"Mod"},{"location":"Commands/Commands-Readme/#immune","text":"Users in the immune rank are excluded from the currently non-existent auto-moderation (which will hopefully be added in the future). Just like the ranks above, users can be added and removed from this role via ?!immune [add/rem] [mention/userID] .","title":"Immune"},{"location":"Commands/Commands-Readme/#member","text":"By default, every non-admin user is apart of the member rank. Members have the most basic permissions and can't use any command requiring the bot owner, admin, or mod rank. Important Because ranks such as the bot master, admin, and mod are capable of negating server, role, and user permissions, be careful to whom you give these ranks.","title":"Member"},{"location":"Commands/Commands/","text":"BulletBot's Command-List \u00b6 This page lists all of the commands that can be used with BulletBot, descriptions of what each command does, and what rank is required to use each command. Category Description \u00b6 Category Description Required Rank Uncategorized Commands that users should see when first using the bot. Mixed Management Contains commands that change settings in BulletBot. Because of this, all the commands in there are admin only. Admin Moderation Contains commands for moderation. All commands are for mods and up. Mod Fun Contains commands that don't really serve a purpose and are just there for fun. (the abc command is a test for the command cache) Member Misc Contains commands that can't be categorized but have a use. Member Command list \u00b6 Command Description Required Rank ?!help Gives a command list and help Member ?!info Returns infos about bot Member ?!ping Check bots responsiveness Member ?!status Gives status of different parts of the bot Bot Master MANAGEMENT ?!admin For managing the admin rank Admin ?!commands Let's you toggle commands Admin ?!filters Let's you toggle filters Admin ?!immune For managing the immune rank Admin ?!log Let's you set the log channel Admin ?!megalog Let's you change megalog settings Admin ?!mod For managing the mod rank Admin ?!prefix Sets custom prefix Admin ?!youtube Create/delete/change YouTube webhooks Admin MODERATION ?!ban Ban members Mod ?!bans Lists all banned members Mod ?!case Lists/deletes all cases of a guild Mod ?!kick Kick members Mod ?!lock Lock a channel for normal members Mod ?!locks Lists all locked channels Mod ?!mute Mute members Mod ?!mutes Lists all muted members Mod ?!purge Command deletes last x messages Mod ?!reason Change reason of case Mod ?!say Let's the bot speak for you Mod ?!softban Kick members and delete all their messages/reactions Mod ?!unban Unban users Mod ?!unlock Unlocks a by the bot locked channel Mod ?!unmute Unmute members Mod ?!warn Warn members Mod ?!warnings List warnings of guild/members Mod FUN ?!abc Does the abc with you Member ?!animal Returns cute animal images Member MISC ?!botsuggest Make suggestion for bot Member ?!bug Reports a bug to the devs Member ?!channelinfo Gives a description of a channel Member ?!lmgtfy Let Me Google That For You link generator Member ?!roleinfo Gives a description of a role Member ?!serverinfo Returns server infos Member ?!whois Gives a description of a user Member","title":"Commands List"},{"location":"Commands/Commands/#bulletbots-command-list","text":"This page lists all of the commands that can be used with BulletBot, descriptions of what each command does, and what rank is required to use each command.","title":"BulletBot's Command-List"},{"location":"Commands/Commands/#category-description","text":"Category Description Required Rank Uncategorized Commands that users should see when first using the bot. Mixed Management Contains commands that change settings in BulletBot. Because of this, all the commands in there are admin only. Admin Moderation Contains commands for moderation. All commands are for mods and up. Mod Fun Contains commands that don't really serve a purpose and are just there for fun. (the abc command is a test for the command cache) Member Misc Contains commands that can't be categorized but have a use. Member","title":"Category Description"},{"location":"Commands/Commands/#command-list","text":"Command Description Required Rank ?!help Gives a command list and help Member ?!info Returns infos about bot Member ?!ping Check bots responsiveness Member ?!status Gives status of different parts of the bot Bot Master MANAGEMENT ?!admin For managing the admin rank Admin ?!commands Let's you toggle commands Admin ?!filters Let's you toggle filters Admin ?!immune For managing the immune rank Admin ?!log Let's you set the log channel Admin ?!megalog Let's you change megalog settings Admin ?!mod For managing the mod rank Admin ?!prefix Sets custom prefix Admin ?!youtube Create/delete/change YouTube webhooks Admin MODERATION ?!ban Ban members Mod ?!bans Lists all banned members Mod ?!case Lists/deletes all cases of a guild Mod ?!kick Kick members Mod ?!lock Lock a channel for normal members Mod ?!locks Lists all locked channels Mod ?!mute Mute members Mod ?!mutes Lists all muted members Mod ?!purge Command deletes last x messages Mod ?!reason Change reason of case Mod ?!say Let's the bot speak for you Mod ?!softban Kick members and delete all their messages/reactions Mod ?!unban Unban users Mod ?!unlock Unlocks a by the bot locked channel Mod ?!unmute Unmute members Mod ?!warn Warn members Mod ?!warnings List warnings of guild/members Mod FUN ?!abc Does the abc with you Member ?!animal Returns cute animal images Member MISC ?!botsuggest Make suggestion for bot Member ?!bug Reports a bug to the devs Member ?!channelinfo Gives a description of a channel Member ?!lmgtfy Let Me Google That For You link generator Member ?!roleinfo Gives a description of a role Member ?!serverinfo Returns server infos Member ?!whois Gives a description of a user Member","title":"Command list"},{"location":"Helpful-Guides/Bot-Token/","text":"Finding and Coping a Bot Token \u00b6 This guide will walk you through the steps to find and copy the bot token for an existing Discord application. If you currently don't have an already existing application, you will need to create one . Navigate to the discord developer portal and log into your Discord account. Open your existing application. Click on the \"Bot\" tab in the settings category on the left of your screen. Click \"Copy\" to copy the Bot Token.","title":"Bot Token"},{"location":"Helpful-Guides/Bot-Token/#finding-and-coping-a-bot-token","text":"This guide will walk you through the steps to find and copy the bot token for an existing Discord application. If you currently don't have an already existing application, you will need to create one . Navigate to the discord developer portal and log into your Discord account. Open your existing application. Click on the \"Bot\" tab in the settings category on the left of your screen. Click \"Copy\" to copy the Bot Token.","title":"Finding and Coping a Bot Token"},{"location":"Helpful-Guides/BulletBot-Startup-Status-Reports/","text":"Introduction \u00b6 When BulletBot is running in the background with auto-restart, the installers can send a report via postfix/sendmail on BulletBot's startup status. The report lists whether or not BulletBot was successfully started, the exit status of essential services, and the startup logs of three services that can be used to help identify errors that might have occurred during BulletBot's startup. Here is an example of what the status report might look like: From: root To: [email@example.com] Subject: BulletBot Startup Status Reports Successfully started bulletbot.service Service exit status codes: mongod.service status: active bulletbot.service status: active -------- mongod.service startup logs -------- [startup logs] -------- End of mongod.service startup logs -------- -------- bulletbot.service startup logs -------- [startup logs] -------- End of bulletbot.service startup logs -------- -------- bullet-mongo-start.service startup log -------- [startup logs] -------- End of bullet-mongo-start.service startup log -------- Note For the rest of this guide, this feature will be referred to as BSSR. Configuring Auto-Restart \u00b6 The configurations that enable BSSR are located in bullet-mongo-start.conf . To use BSSR, you will need to modify this config file. Follow the instructions below to enable BSSR: Change your working directory: cd /home/bulletbot/installers/Linux_Universal/auto-restart/ Copy the config file, replacing the conf extension with local : sudo cp bullet-mongo-start.conf bullet-mongo-start.local Change the ownership of the new file: sudo chown bulletbot:bulletbot bullet-mongo-start.local Open the newly created file with your favorite text editor (use sudo when opening the file). Uncomment both SendStatus and MailTo Replace email1@example.com, email2@example.com , located in MailTo , with the email addresses you want future status reports sent to You may add more than one address to this variable, using a comma to separate each one Save and exit the file Configuration modifications All modifications to the config file should always be done to bullet-mongo-start.local , as bullet-mongo-start.conf is overwritten every time you download/update BulletBot. Setting Up Postfix \u00b6 After configuring the installers to use BSSR, it's time to install Postfix, which is a free and open-source mail transfer agent. In this guide, we'll be explaining how to set Postfix up using an existing Gmail account. We will also install mailutils/mailx so that we can send a test email. Where necessary, we will install supplemental SASL libraries. 1. Install Required Software \u00b6 Debian, Ubuntu: sudo apt update && sudo apt install postfix mailutils CentOS, RHEL: sudo yum -y install postfix cyrus-sasl-plain mailx When prompted for \"General type of mail configuration,\" choose \"Internet Site\". When prompted for a \"Mail name,\" choose a hostname to be used in mail headers as the origin of your emails. A fully-qualified domain name is preferred, but using your machine's simple hostname is OK. Regardless of what you enter here, your return address will appear to recipients as your Gmail address. You may be prompted to set the \"Root and postmaster mail recipient.\" Enter root, or another user who should receive mail subsystem notifications. For any other prompts, you can choose the default values. 2. Configure Gmail Authentication \u00b6 In the authentication information below, replace username with your Gmail username and password with a Gmail app password. If you do not have a Gmail app password, create one following this guide . The password file will reside in the Postfix configuration directory. The file can be named whatever you like, but the recommended filename is sasl_passwd . Create or edit /etc/postfix/sasl_passwd using your favorite text editor (use sudo when opening/creating the file). Add the line: [smtp.gmail.com]:587 username@gmail.com:password Make sure to replace username with your Gmail username and password with a Gmail app password. Save and exit the file. Change the permissions of the file: sudo chmod 600 /etc/postfix/sasl_passwd 3. Configure Postfix \u00b6 Six parameters must be set in the Postfix configuration file main.cf . To set these parameters: Debian, Ubuntu \u00b6 Open /etc/postfix/main.cf with your favorite text editor (use sudo when opening the file). Add or modify the following values: relayhost = [smtp.gmail.com]:587 smtp_sasl_auth_enable = yes smtp_sasl_security_options = noanonymous smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd smtp_tls_security_level = encrypt smtp_tls_CAfile = /etc/ssl/certs/ca-certificates.crt Save and exit the file. CentOS, RHEL \u00b6 Open /etc/postfix/main.cf with your favorite text editor (use sudo when opening the file). Add or modify the following values: relayhost = [smtp.gmail.com]:587 smtp_use_tls = yes smtp_sasl_auth_enable = yes smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd smtp_tls_CAfile = /etc/ssl/certs/ca-bundle.crt smtp_sasl_security_options = noanonymous smtp_sasl_tls_security_options = noanonymous Save and exit the file. 4. Process Password File \u00b6 Use postmap to compile and hash the contents of sasl_passwd. The results will be stored in your Postfix configuration directory in the file sasl_passwd.db . sudo postmap /etc/postfix/sasl_passwd 5. Restart Postfix \u00b6 Restart the Postfix service, putting your changes into effect. sudo systemctl restart postfix.service 6. Enable \"Less Secure Apps\" In Gmail \u00b6 By default, only the most secure sign-ins, such as logging in to Gmail on the web, are allowed for your Gmail account. To permit relay requests, log in to your Gmail account and turn on \"Allow less secure apps.\" For more information, review the Google Support document, \"Allowing less secure apps to access your account.\" Postfix Setup Sources \u00b6 All the information on how to set Postfix up was taken from different sources on the web. Links to all of the references are posted below. Sources: https://www.howtoforge.com/tutorial/configure-postfix-to-use-gmail-as-a-mail-relay/ https://www.linode.com/docs/email/postfix/configure-postfix-to-send-mail-using-gmail-and-google-apps-on-debian-or-ubuntu/#generate-an-app-password-for-postfix https://kifarunix.com/configure-postfix-to-use-gmail-smtp-on-ubuntu-18-04/ https://devops.ionos.com/tutorials/configure-a-postfix-relay-through-gmail-on-centos-7/","title":"BSSR"},{"location":"Helpful-Guides/BulletBot-Startup-Status-Reports/#introduction","text":"When BulletBot is running in the background with auto-restart, the installers can send a report via postfix/sendmail on BulletBot's startup status. The report lists whether or not BulletBot was successfully started, the exit status of essential services, and the startup logs of three services that can be used to help identify errors that might have occurred during BulletBot's startup. Here is an example of what the status report might look like: From: root To: [email@example.com] Subject: BulletBot Startup Status Reports Successfully started bulletbot.service Service exit status codes: mongod.service status: active bulletbot.service status: active -------- mongod.service startup logs -------- [startup logs] -------- End of mongod.service startup logs -------- -------- bulletbot.service startup logs -------- [startup logs] -------- End of bulletbot.service startup logs -------- -------- bullet-mongo-start.service startup log -------- [startup logs] -------- End of bullet-mongo-start.service startup log -------- Note For the rest of this guide, this feature will be referred to as BSSR.","title":"Introduction"},{"location":"Helpful-Guides/BulletBot-Startup-Status-Reports/#configuring-auto-restart","text":"The configurations that enable BSSR are located in bullet-mongo-start.conf . To use BSSR, you will need to modify this config file. Follow the instructions below to enable BSSR: Change your working directory: cd /home/bulletbot/installers/Linux_Universal/auto-restart/ Copy the config file, replacing the conf extension with local : sudo cp bullet-mongo-start.conf bullet-mongo-start.local Change the ownership of the new file: sudo chown bulletbot:bulletbot bullet-mongo-start.local Open the newly created file with your favorite text editor (use sudo when opening the file). Uncomment both SendStatus and MailTo Replace email1@example.com, email2@example.com , located in MailTo , with the email addresses you want future status reports sent to You may add more than one address to this variable, using a comma to separate each one Save and exit the file Configuration modifications All modifications to the config file should always be done to bullet-mongo-start.local , as bullet-mongo-start.conf is overwritten every time you download/update BulletBot.","title":"Configuring Auto-Restart"},{"location":"Helpful-Guides/BulletBot-Startup-Status-Reports/#setting-up-postfix","text":"After configuring the installers to use BSSR, it's time to install Postfix, which is a free and open-source mail transfer agent. In this guide, we'll be explaining how to set Postfix up using an existing Gmail account. We will also install mailutils/mailx so that we can send a test email. Where necessary, we will install supplemental SASL libraries.","title":"Setting Up Postfix"},{"location":"Helpful-Guides/BulletBot-Startup-Status-Reports/#1-install-required-software","text":"Debian, Ubuntu: sudo apt update && sudo apt install postfix mailutils CentOS, RHEL: sudo yum -y install postfix cyrus-sasl-plain mailx When prompted for \"General type of mail configuration,\" choose \"Internet Site\". When prompted for a \"Mail name,\" choose a hostname to be used in mail headers as the origin of your emails. A fully-qualified domain name is preferred, but using your machine's simple hostname is OK. Regardless of what you enter here, your return address will appear to recipients as your Gmail address. You may be prompted to set the \"Root and postmaster mail recipient.\" Enter root, or another user who should receive mail subsystem notifications. For any other prompts, you can choose the default values.","title":"1. Install Required Software"},{"location":"Helpful-Guides/BulletBot-Startup-Status-Reports/#2-configure-gmail-authentication","text":"In the authentication information below, replace username with your Gmail username and password with a Gmail app password. If you do not have a Gmail app password, create one following this guide . The password file will reside in the Postfix configuration directory. The file can be named whatever you like, but the recommended filename is sasl_passwd . Create or edit /etc/postfix/sasl_passwd using your favorite text editor (use sudo when opening/creating the file). Add the line: [smtp.gmail.com]:587 username@gmail.com:password Make sure to replace username with your Gmail username and password with a Gmail app password. Save and exit the file. Change the permissions of the file: sudo chmod 600 /etc/postfix/sasl_passwd","title":"2. Configure Gmail Authentication"},{"location":"Helpful-Guides/BulletBot-Startup-Status-Reports/#3-configure-postfix","text":"Six parameters must be set in the Postfix configuration file main.cf . To set these parameters:","title":"3. Configure Postfix"},{"location":"Helpful-Guides/BulletBot-Startup-Status-Reports/#debian-ubuntu","text":"Open /etc/postfix/main.cf with your favorite text editor (use sudo when opening the file). Add or modify the following values: relayhost = [smtp.gmail.com]:587 smtp_sasl_auth_enable = yes smtp_sasl_security_options = noanonymous smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd smtp_tls_security_level = encrypt smtp_tls_CAfile = /etc/ssl/certs/ca-certificates.crt Save and exit the file.","title":"Debian, Ubuntu"},{"location":"Helpful-Guides/BulletBot-Startup-Status-Reports/#centos-rhel","text":"Open /etc/postfix/main.cf with your favorite text editor (use sudo when opening the file). Add or modify the following values: relayhost = [smtp.gmail.com]:587 smtp_use_tls = yes smtp_sasl_auth_enable = yes smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd smtp_tls_CAfile = /etc/ssl/certs/ca-bundle.crt smtp_sasl_security_options = noanonymous smtp_sasl_tls_security_options = noanonymous Save and exit the file.","title":"CentOS, RHEL"},{"location":"Helpful-Guides/BulletBot-Startup-Status-Reports/#4-process-password-file","text":"Use postmap to compile and hash the contents of sasl_passwd. The results will be stored in your Postfix configuration directory in the file sasl_passwd.db . sudo postmap /etc/postfix/sasl_passwd","title":"4. Process Password File"},{"location":"Helpful-Guides/BulletBot-Startup-Status-Reports/#5-restart-postfix","text":"Restart the Postfix service, putting your changes into effect. sudo systemctl restart postfix.service","title":"5. Restart Postfix"},{"location":"Helpful-Guides/BulletBot-Startup-Status-Reports/#6-enable-less-secure-apps-in-gmail","text":"By default, only the most secure sign-ins, such as logging in to Gmail on the web, are allowed for your Gmail account. To permit relay requests, log in to your Gmail account and turn on \"Allow less secure apps.\" For more information, review the Google Support document, \"Allowing less secure apps to access your account.\"","title":"6. Enable \"Less Secure Apps\" In Gmail"},{"location":"Helpful-Guides/BulletBot-Startup-Status-Reports/#postfix-setup-sources","text":"All the information on how to set Postfix up was taken from different sources on the web. Links to all of the references are posted below. Sources: https://www.howtoforge.com/tutorial/configure-postfix-to-use-gmail-as-a-mail-relay/ https://www.linode.com/docs/email/postfix/configure-postfix-to-send-mail-using-gmail-and-google-apps-on-debian-or-ubuntu/#generate-an-app-password-for-postfix https://kifarunix.com/configure-postfix-to-use-gmail-smtp-on-ubuntu-18-04/ https://devops.ionos.com/tutorials/configure-a-postfix-relay-through-gmail-on-centos-7/","title":"Postfix Setup Sources"},{"location":"Helpful-Guides/Creating-%26-Inviting-A-Bot/","text":"Creating and Inviting A Discord Application \u00b6 Creating A Discord Application \u00b6 Navigate to the discord developer portal and log into your Discord account. Create a new application by clicking the \"New Application\" button at the top right of your window. Give your application a name, then press \"Create\". Click on the \"Bot\" tab in the settings category on the left of your screen. Press the \"Add Bot\" button, located on the right side of your screen. Press \"Yes, do it!\" to finalize the creation of your bot. Inviting An Application To Your Discord Server \u00b6 If you haven't already created an application/bot, follow the steps listed above in Creating A Discord Application If you aren't already at the discord developer portal, make your way there now . Click on an existing application. On the \"General Information\" tab, copy your Client ID. Replace the 12345678 in this link: https://discordapp.com/oauth2/authorize?client_id=12345678&scope=bot&permissions=66186303 with your Client ID. The link should now look similar to this: https://discordapp.com/oauth2/authorize?client_id=YOUR_CLIENT_ID_HERE&scope=bot&permissions=600042638 Copy and paste the URL that you just created into the search bar of your web browser and press [Enter]. Select a server you want to add the bot to, then press the \"Authorize\" button to confirm the invite. Successfully perform the captcha. The bot should have been added to your server.","title":"Invite A Bot"},{"location":"Helpful-Guides/Creating-%26-Inviting-A-Bot/#creating-and-inviting-a-discord-application","text":"","title":"Creating and Inviting A Discord Application"},{"location":"Helpful-Guides/Creating-%26-Inviting-A-Bot/#creating-a-discord-application","text":"Navigate to the discord developer portal and log into your Discord account. Create a new application by clicking the \"New Application\" button at the top right of your window. Give your application a name, then press \"Create\". Click on the \"Bot\" tab in the settings category on the left of your screen. Press the \"Add Bot\" button, located on the right side of your screen. Press \"Yes, do it!\" to finalize the creation of your bot.","title":"Creating A Discord Application"},{"location":"Helpful-Guides/Creating-%26-Inviting-A-Bot/#inviting-an-application-to-your-discord-server","text":"If you haven't already created an application/bot, follow the steps listed above in Creating A Discord Application If you aren't already at the discord developer portal, make your way there now . Click on an existing application. On the \"General Information\" tab, copy your Client ID. Replace the 12345678 in this link: https://discordapp.com/oauth2/authorize?client_id=12345678&scope=bot&permissions=66186303 with your Client ID. The link should now look similar to this: https://discordapp.com/oauth2/authorize?client_id=YOUR_CLIENT_ID_HERE&scope=bot&permissions=600042638 Copy and paste the URL that you just created into the search bar of your web browser and press [Enter]. Select a server you want to add the bot to, then press the \"Authorize\" button to confirm the invite. Successfully perform the captcha. The bot should have been added to your server.","title":"Inviting An Application To Your Discord Server"},{"location":"Helpful-Guides/Google-API-Setup/","text":"Creating and Coping a Google API Key \u00b6 Here we'll be looking at how you can get a Google API Key for the bot so that you can use webhooks. BulletBot doesn't need the API to have working YouTube webhooks, but it uses it to resolve a channel or user name to a channel ID. Go to the Google API Console: https://console.cloud.google.com/projectselector2/home/dashboard Create a new project by pressing the \"Create Project\" button at the top right of your window. Give your project a name. Click on the \"Marketplace\" tab in the drop-down menu on the left of your screen. Search youtube data api v3 and select the first result. Enable the API. Navigate to the project credentials page at https://console.cloud.google.com/apis/credentials . (Check that you have still the right project chosen because this link doesn't specify that) Select API Key in the Create Credentials drop-down. Copy the API, and you are now set. Important Do NOT share the API key with others. Everyone that has the key can freely use your API quota.","title":"Google API Key"},{"location":"Helpful-Guides/Google-API-Setup/#creating-and-coping-a-google-api-key","text":"Here we'll be looking at how you can get a Google API Key for the bot so that you can use webhooks. BulletBot doesn't need the API to have working YouTube webhooks, but it uses it to resolve a channel or user name to a channel ID. Go to the Google API Console: https://console.cloud.google.com/projectselector2/home/dashboard Create a new project by pressing the \"Create Project\" button at the top right of your window. Give your project a name. Click on the \"Marketplace\" tab in the drop-down menu on the left of your screen. Search youtube data api v3 and select the first result. Enable the API. Navigate to the project credentials page at https://console.cloud.google.com/apis/credentials . (Check that you have still the right project chosen because this link doesn't specify that) Select API Key in the Create Credentials drop-down. Copy the API, and you are now set. Important Do NOT share the API key with others. Everyone that has the key can freely use your API quota.","title":"Creating and Coping a Google API Key"},{"location":"Helpful-Guides/MongoDB-Compass/","text":"Connecting to the MongoDB Database via Compass \u00b6 Currently under construction","title":"MongoDB Compass"},{"location":"Helpful-Guides/MongoDB-Compass/#connecting-to-the-mongodb-database-via-compass","text":"Currently under construction","title":"Connecting to the MongoDB Database via Compass"},{"location":"Setup-Guides/Development/Linux-Dev-Setup-Guide/","text":"Linux Development Setup Guide \u00b6 This guide is meant for those who want to do the development work on BulletBot, or wish to set BulletBot up manually. It will instruct and explain the process in which BulletBot is manually set up on a Linux based distribution Officially Supported Linux Distributions \u00b6 Below is a list of Linux Distributions that BulletBot is officially supported on. Distributions Distro Versions Architecture Ubuntu 16.04 18.04 64 bit - (ARM64 not supported) Debian 9 10 64 bit RHEL 7 8 64 bit CentOS 7 8 64 bit Getting Started \u00b6 1. Installing MongoDB And Node.js \u00b6 First, you will have to install the required software to compile and run the bot. BulletBot runs on Node.js and uses a MongoDB cluster to work. Download and install both via the links below: Node.js (Recommended version: 14.x): Download and install via a package manager: https://github.com/nodesource/distributions/blob/master/README.md MongoDB (Recommended: version 4.2.x): Download and install guide: https://docs.mongodb.com/manual/administration/install-on-linux/ Note: Do not start or enable mongod.service , after MongoDB has been installed. It is recommended to install MongoDB Compass alongside MongoDB, as it can make connecting to the database easier. For instructions on how to use/setup MongoDB Compass, follow this guide . 2. Install Node.js Global Packages \u00b6 Now that Node.js is installed, you'll need to install TypeScript, which is used to compile .ts to .js . Additionally, you can download TypeDoc to build the source documentation. Execute the following commands to: install TypeScript : sudo npm install -g typescript install TypeDoc (optional): sudo npm install -g typedoc 3. Setting Up Project Directory \u00b6 After everything is installed, it's time to start adding the necessary files and folders. 3.1. Folder Structure \u00b6 Below is the recommended folder structure for your project folder: . \u251c\u2500\u2500 database (location of MongoDB cluster) \u251c\u2500\u2500 BulletBot (repo location) \u2514\u2500\u2500 docs (location of docs build by TypeDoc) Note The rest of this guide will assume you are using this folder structure. You are not expected to create these folders right now. The guide will tell you when you will need to create them. (The BulletBot directory is created when the repo is cloned) 3.2. Cloning The Repo \u00b6 Clone the repo into your project directory by executing: git clone https://github.com/CodeBullet-Community/BulletBot If you rather clone a specific branch in the repository, execute: git clone -b [ branch name ] --single-branch https://github.com/CodeBullet-Community/BulletBot Replace [branch name] with the name of the branch you want to clone. 4. Installing Node.js Local Packages \u00b6 Now that the BulletBot repo has been downloaded, you'll need to install the rest of the Node.js packages locally. Inside the BulletBot repo directory, execute: npm install 5. Setting Up The MongoDB Cluster \u00b6 In this guide, the cluster is set up without any authentication or replication. For people who are running BulletBot on a public discord server or outside of the development environment, it is highly recommended to add authentication. 5.1. Starting The Cluster \u00b6 Create the database directory in your project folder and in a new terminal (window), start the MongoDB cluster using. mongod --port [ port ] --dbpath [ absolute path to database dir ] Note Default port is 27017 This command only start mongod.service in the current session. This means that you will have to run this command every time before you try to run BulletBot. If mongod.service has already been started, this command will not work. Stop the service by executing sudo systemctl stop mongod.service . If the command can't be found, you will have to add it to PATH manually. The cluster is ready when it prints out [initandlisten] waiting for connections (might not be the last line it prints out). Don't kill the process as this would kill the cluster. 5.2. Inserting Settings Document \u00b6 BulletBot needs a settings document placed in the database to work. This document is similar to bot-config.json , but whereas the JSON file requires BulletBot to be a restart for any changes to be applied, changes to the settings document take immediate effect. Before adding the document, make sure to add your Discord user ID to the botMasters field. The ID should be a long string of numbers similar to 516213540576277819 . Follow the instructions below to add the settings document to the MongoDB database: Open the mongo shell: mongo --port [port] Switch to the settings collection: use settings Insert the following document: db.settings.insert( { \"prefix\" : \"?!\" , \"presence\" : { \"status\" : \"online\" , \"game\" : { \"name\" : \"?!help\" , \"type\" : \"Playing\" } }, \"embedColors\" : { \"default\" : 8311585 , \"help\" : 8311585 , \"neutral\" : 4868682 , \"negative\" : 15805477 , \"warn\" : 16086051 , \"positive\" : 8311585 }, \"botMasters\" : [ \"[user ID of bot masters]\" ], \"commands\" : { \"animal\" : { \"apis\" : { \"cat\" : \"https://some-random-api.ml/img/cat\" , \"dog\" : \"https://some-random-api.ml/img/dog\" , \"fox\" : \"https://some-random-api.ml/img/fox\" , \"panda\" : \"https://some-random-api.ml/img/panda\" , \"red-panda\" : \"https://some-random-api.ml/img/red_panda\" , \"bird\" : \"https://some-random-api.ml/img/birb\" , \"pikachu\" : \"https://some-random-api.ml/pikachuimg\" } }, \"purge\" : { \"maxMessages\" : 1000 } } } ) Something similar to WriteResult({ \"nInserted\" : 1 }) will be printed to the screen if the settings were successfully added to the database. Exit the mongo shell: exit 6. Adding BulletBot Config File \u00b6 In addition to the settings document, as mentioned above, a bot-config.json file needs to be created. First and foremost, if you haven't already created an application/bot , do so now. You'll need the bot key that is generated when setting up BulletBot's config file. Once you have done this, you can continue and set up the config file. We will want to put the following template into BulletBot/out/bot-config.json (if the code is already compiled) or BulletBot/src/bot-config.json (if the code has not been compiled): { \"botToken\" : \"[bot token]\" , \"cluster\" : { \"url\" : \"mongodb://localhost:[port]\" , \"suffix\" : \"\" }, \"googleAPIKey\" : \"[optional Google API key]\" , \"globalUpdateInterval\" : 10000 , \"cleanInterval\" : 600000 , \"pActionsInterval\" : 1000 , \"YTResubInterval\" : 259200000 , \"crashProof\" : { \"file\" : \"/home/bulletbot/crashProof.time\" , \"interval\" : 10000 }, \"callback\" : { \"URL\" : \"[ip address or domain name]\" , \"port\" : 8000 , \"path\" : \"/webhooks\" }, \"youtube\" : { \"logo\" : \"https://www.android-user.de/wp-content/uploads/2018/07/icon-youtobe.png\" , \"color\" : 16711680 , \"name\" : \"YouTube\" } } After placing the template into bot-config.json , replace [bot token] with the bot's token and [port] with the port number that MongoDB will run on (default is 27017). Note The Google API key is only required if you want to use commands that require access to Google services. The callback is only needed when you want to use webhooks. 7. Compile Code & Running BulletBot \u00b6 7.1. Compile TypeScript Code \u00b6 Before running BulletBot, you first need to compile the TypeScript code into JavaScript code. To do this, open a new terminal (window), then execute tsc in the BulletBot directory. This will start the compiler in watch mode, which means it will automatically compile changes in the code. 7.2. Running BulletBot \u00b6 After all the code has compiled into JavaScript, you can now run BulletBot in your current session by executing node out/index.js in the BulletBot directory. You'll see information printed to the screen, displaying logs on BulletBot's startup. The logs should look similar to this: [24/10/2019 01:16:15.109] [INFO] [commands.js:null:52] loading 4 commands in out/commands/ [24/10/2019 01:16:15.111] [INFO] [commands.js:null:55] 1: help.js loaded! [24/10/2019 01:16:15.113] [INFO] [commands.js:null:55] 2: info.js loaded! [24/10/2019 01:16:15.115] [INFO] [commands.js:null:55] 3: ping.js loaded! [24/10/2019 01:16:15.116] [INFO] [commands.js:null:55] 4: status.js loaded! [24/10/2019 01:16:15.117] [INFO] [filters.js:null:54] loading 1 filters in out/filters/ [24/10/2019 01:16:15.118] [INFO] [filters.js:null:57] 1: kappa.js loaded! [24/10/2019 01:16:15.119] [INFO] [commands.js:null:52] loading 2 commands in out/commands/Fun/ [24/10/2019 01:16:15.122] [INFO] [commands.js:null:55] 1: abc.js loaded! [24/10/2019 01:16:15.125] [INFO] [commands.js:null:55] 2: animal.js loaded! [24/10/2019 01:16:15.126] [INFO] [commands.js:null:52] loading 9 commands in out/commands/Management/ [24/10/2019 01:16:15.127] [INFO] [commands.js:null:55] 1: admin.js loaded! [24/10/2019 01:16:15.128] [INFO] [commands.js:null:55] 2: commands.js loaded! [24/10/2019 01:16:15.130] [INFO] [commands.js:null:55] 3: filters.js loaded! [24/10/2019 01:16:15.131] [INFO] [commands.js:null:55] 4: immune.js loaded! [24/10/2019 01:16:15.132] [INFO] [commands.js:null:55] 5: log.js loaded! [24/10/2019 01:16:15.133] [INFO] [commands.js:null:55] 6: megalog.js loaded! [24/10/2019 01:16:15.135] [INFO] [commands.js:null:55] 7: mod.js loaded! [24/10/2019 01:16:15.136] [INFO] [commands.js:null:55] 8: prefix.js loaded! [24/10/2019 01:16:15.144] [INFO] [commands.js:null:55] 9: youtube.js loaded! [24/10/2019 01:16:15.144] [INFO] [commands.js:null:52] loading 7 commands in out/commands/Misc/ [24/10/2019 01:16:15.146] [INFO] [commands.js:null:55] 1: botsuggest.js loaded! [24/10/2019 01:16:15.147] [INFO] [commands.js:null:55] 2: bug.js loaded! [24/10/2019 01:16:15.148] [INFO] [commands.js:null:55] 3: channelinfo.js loaded! [24/10/2019 01:16:15.153] [INFO] [commands.js:null:55] 4: lmgtfy.js loaded! [24/10/2019 01:16:15.154] [INFO] [commands.js:null:55] 5: roleinfo.js loaded! [24/10/2019 01:16:15.155] [INFO] [commands.js:null:55] 6: serverinfo.js loaded! [24/10/2019 01:16:15.156] [INFO] [commands.js:null:55] 7: whois.js loaded! [24/10/2019 01:16:15.157] [INFO] [commands.js:null:52] loading 18 commands in out/commands/Moderation/ [24/10/2019 01:16:15.158] [INFO] [commands.js:null:55] 1: ban.js loaded! [24/10/2019 01:16:15.159] [INFO] [commands.js:null:55] 2: bans.js loaded! [24/10/2019 01:16:15.160] [INFO] [commands.js:null:55] 3: case.js loaded! [24/10/2019 01:16:15.162] [INFO] [commands.js:null:55] 4: casedelete.js loaded! [24/10/2019 01:16:15.163] [INFO] [commands.js:null:55] 5: kick.js loaded! [24/10/2019 01:16:15.166] [INFO] [commands.js:null:55] 6: lock.js loaded! [24/10/2019 01:16:15.169] [INFO] [commands.js:null:55] 7: locks.js loaded! [24/10/2019 01:16:15.171] [INFO] [commands.js:null:55] 8: mute.js loaded! [24/10/2019 01:16:15.172] [INFO] [commands.js:null:55] 9: mutes.js loaded! [24/10/2019 01:16:15.173] [INFO] [commands.js:null:55] 10: purge.js loaded! [24/10/2019 01:16:15.174] [INFO] [commands.js:null:55] 11: reason.js loaded! [24/10/2019 01:16:15.176] [INFO] [commands.js:null:55] 12: say.js loaded! [24/10/2019 01:16:15.177] [INFO] [commands.js:null:55] 13: softban.js loaded! [24/10/2019 01:16:15.179] [INFO] [commands.js:null:55] 14: unban.js loaded! [24/10/2019 01:16:15.180] [INFO] [commands.js:null:55] 15: unlock.js loaded! [24/10/2019 01:16:15.181] [INFO] [commands.js:null:55] 16: unmute.js loaded! [24/10/2019 01:16:15.185] [INFO] [commands.js:null:55] 17: warn.js loaded! [24/10/2019 01:16:15.186] [INFO] [commands.js:null:55] 18: warnings.js loaded! [24/10/2019 01:16:15.203] [LOG] [database.js:null:28] connected to /main database [24/10/2019 01:16:15.219] [INFO] [database.js:null:50] cleaning database every 600000ms [24/10/2019 01:16:15.220] [LOG] [mStats.js:null:30] connected to /mStats database [24/10/2019 01:16:15.235] [LOG] [logger.js:null:29] logger connected to /main database [24/10/2019 01:16:15.236] [LOG] [database.js:null:58] connected to /settings database [24/10/2019 01:16:15.237] [INFO] [database.js:null:66] updating global cache every 10000ms [24/10/2019 01:16:15.243] [LOG] [youtube.js:null:156] connected to /webhooks database [24/10/2019 01:16:15.244] [LOG] [pActions.js:null:28] pActions connected to /main database [24/10/2019 01:16:15.245] [LOG] [caseLogger.js:null:26] caseLogger connected to /main database [24/10/2019 01:16:15.248] [INFO] [mStats.js:init:79] Resolved 0 days in hourly collection. [24/10/2019 01:16:15.259] [INFO] [mStats.js:init:99] Using existing hour document [24/10/2019 01:16:17.542] [INFO] [index.js:null:119] Adding 0 guilds and removing 0 guilds [24/10/2019 01:16:17.543] [LOG] [index.js:null:127] I'm ready! If it doesn't work, check that you did everything correctly or ask for help in the BulletBot Discord server. If it did work, congratulations, you just set up your BulletBot dev environment. Now you can code and test your ideas. Build Docs \u00b6 If you want to build the documentation with TypeDoc, create a directory called docs in the project directory, then run the following command in the BulletBot repo directory: typedoc --out ../docs/ ./src/ --tsconfig ./tsconfig.json --mode file --name BulletBot --readme ./README.md --media ./media/ Note You will have to have TypeDoc installed (refer to step 2). You will need to rebuild the documentation every time you want to update it to the new source.","title":"Linux"},{"location":"Setup-Guides/Development/Linux-Dev-Setup-Guide/#linux-development-setup-guide","text":"This guide is meant for those who want to do the development work on BulletBot, or wish to set BulletBot up manually. It will instruct and explain the process in which BulletBot is manually set up on a Linux based distribution","title":"Linux Development Setup Guide"},{"location":"Setup-Guides/Development/Linux-Dev-Setup-Guide/#officially-supported-linux-distributions","text":"Below is a list of Linux Distributions that BulletBot is officially supported on. Distributions Distro Versions Architecture Ubuntu 16.04 18.04 64 bit - (ARM64 not supported) Debian 9 10 64 bit RHEL 7 8 64 bit CentOS 7 8 64 bit","title":"Officially Supported Linux Distributions"},{"location":"Setup-Guides/Development/Linux-Dev-Setup-Guide/#getting-started","text":"","title":"Getting Started"},{"location":"Setup-Guides/Development/Linux-Dev-Setup-Guide/#1-installing-mongodb-and-nodejs","text":"First, you will have to install the required software to compile and run the bot. BulletBot runs on Node.js and uses a MongoDB cluster to work. Download and install both via the links below: Node.js (Recommended version: 14.x): Download and install via a package manager: https://github.com/nodesource/distributions/blob/master/README.md MongoDB (Recommended: version 4.2.x): Download and install guide: https://docs.mongodb.com/manual/administration/install-on-linux/ Note: Do not start or enable mongod.service , after MongoDB has been installed. It is recommended to install MongoDB Compass alongside MongoDB, as it can make connecting to the database easier. For instructions on how to use/setup MongoDB Compass, follow this guide .","title":"1. Installing MongoDB And Node.js"},{"location":"Setup-Guides/Development/Linux-Dev-Setup-Guide/#2-install-nodejs-global-packages","text":"Now that Node.js is installed, you'll need to install TypeScript, which is used to compile .ts to .js . Additionally, you can download TypeDoc to build the source documentation. Execute the following commands to: install TypeScript : sudo npm install -g typescript install TypeDoc (optional): sudo npm install -g typedoc","title":"2. Install Node.js Global Packages"},{"location":"Setup-Guides/Development/Linux-Dev-Setup-Guide/#3-setting-up-project-directory","text":"After everything is installed, it's time to start adding the necessary files and folders.","title":"3. Setting Up Project Directory"},{"location":"Setup-Guides/Development/Linux-Dev-Setup-Guide/#31-folder-structure","text":"Below is the recommended folder structure for your project folder: . \u251c\u2500\u2500 database (location of MongoDB cluster) \u251c\u2500\u2500 BulletBot (repo location) \u2514\u2500\u2500 docs (location of docs build by TypeDoc) Note The rest of this guide will assume you are using this folder structure. You are not expected to create these folders right now. The guide will tell you when you will need to create them. (The BulletBot directory is created when the repo is cloned)","title":"3.1. Folder Structure"},{"location":"Setup-Guides/Development/Linux-Dev-Setup-Guide/#32-cloning-the-repo","text":"Clone the repo into your project directory by executing: git clone https://github.com/CodeBullet-Community/BulletBot If you rather clone a specific branch in the repository, execute: git clone -b [ branch name ] --single-branch https://github.com/CodeBullet-Community/BulletBot Replace [branch name] with the name of the branch you want to clone.","title":"3.2. Cloning The Repo"},{"location":"Setup-Guides/Development/Linux-Dev-Setup-Guide/#4-installing-nodejs-local-packages","text":"Now that the BulletBot repo has been downloaded, you'll need to install the rest of the Node.js packages locally. Inside the BulletBot repo directory, execute: npm install","title":"4. Installing Node.js Local Packages"},{"location":"Setup-Guides/Development/Linux-Dev-Setup-Guide/#5-setting-up-the-mongodb-cluster","text":"In this guide, the cluster is set up without any authentication or replication. For people who are running BulletBot on a public discord server or outside of the development environment, it is highly recommended to add authentication.","title":"5. Setting Up The MongoDB Cluster"},{"location":"Setup-Guides/Development/Linux-Dev-Setup-Guide/#51-starting-the-cluster","text":"Create the database directory in your project folder and in a new terminal (window), start the MongoDB cluster using. mongod --port [ port ] --dbpath [ absolute path to database dir ] Note Default port is 27017 This command only start mongod.service in the current session. This means that you will have to run this command every time before you try to run BulletBot. If mongod.service has already been started, this command will not work. Stop the service by executing sudo systemctl stop mongod.service . If the command can't be found, you will have to add it to PATH manually. The cluster is ready when it prints out [initandlisten] waiting for connections (might not be the last line it prints out). Don't kill the process as this would kill the cluster.","title":"5.1. Starting The Cluster"},{"location":"Setup-Guides/Development/Linux-Dev-Setup-Guide/#52-inserting-settings-document","text":"BulletBot needs a settings document placed in the database to work. This document is similar to bot-config.json , but whereas the JSON file requires BulletBot to be a restart for any changes to be applied, changes to the settings document take immediate effect. Before adding the document, make sure to add your Discord user ID to the botMasters field. The ID should be a long string of numbers similar to 516213540576277819 . Follow the instructions below to add the settings document to the MongoDB database: Open the mongo shell: mongo --port [port] Switch to the settings collection: use settings Insert the following document: db.settings.insert( { \"prefix\" : \"?!\" , \"presence\" : { \"status\" : \"online\" , \"game\" : { \"name\" : \"?!help\" , \"type\" : \"Playing\" } }, \"embedColors\" : { \"default\" : 8311585 , \"help\" : 8311585 , \"neutral\" : 4868682 , \"negative\" : 15805477 , \"warn\" : 16086051 , \"positive\" : 8311585 }, \"botMasters\" : [ \"[user ID of bot masters]\" ], \"commands\" : { \"animal\" : { \"apis\" : { \"cat\" : \"https://some-random-api.ml/img/cat\" , \"dog\" : \"https://some-random-api.ml/img/dog\" , \"fox\" : \"https://some-random-api.ml/img/fox\" , \"panda\" : \"https://some-random-api.ml/img/panda\" , \"red-panda\" : \"https://some-random-api.ml/img/red_panda\" , \"bird\" : \"https://some-random-api.ml/img/birb\" , \"pikachu\" : \"https://some-random-api.ml/pikachuimg\" } }, \"purge\" : { \"maxMessages\" : 1000 } } } ) Something similar to WriteResult({ \"nInserted\" : 1 }) will be printed to the screen if the settings were successfully added to the database. Exit the mongo shell: exit","title":"5.2. Inserting Settings Document"},{"location":"Setup-Guides/Development/Linux-Dev-Setup-Guide/#6-adding-bulletbot-config-file","text":"In addition to the settings document, as mentioned above, a bot-config.json file needs to be created. First and foremost, if you haven't already created an application/bot , do so now. You'll need the bot key that is generated when setting up BulletBot's config file. Once you have done this, you can continue and set up the config file. We will want to put the following template into BulletBot/out/bot-config.json (if the code is already compiled) or BulletBot/src/bot-config.json (if the code has not been compiled): { \"botToken\" : \"[bot token]\" , \"cluster\" : { \"url\" : \"mongodb://localhost:[port]\" , \"suffix\" : \"\" }, \"googleAPIKey\" : \"[optional Google API key]\" , \"globalUpdateInterval\" : 10000 , \"cleanInterval\" : 600000 , \"pActionsInterval\" : 1000 , \"YTResubInterval\" : 259200000 , \"crashProof\" : { \"file\" : \"/home/bulletbot/crashProof.time\" , \"interval\" : 10000 }, \"callback\" : { \"URL\" : \"[ip address or domain name]\" , \"port\" : 8000 , \"path\" : \"/webhooks\" }, \"youtube\" : { \"logo\" : \"https://www.android-user.de/wp-content/uploads/2018/07/icon-youtobe.png\" , \"color\" : 16711680 , \"name\" : \"YouTube\" } } After placing the template into bot-config.json , replace [bot token] with the bot's token and [port] with the port number that MongoDB will run on (default is 27017). Note The Google API key is only required if you want to use commands that require access to Google services. The callback is only needed when you want to use webhooks.","title":"6. Adding BulletBot Config File"},{"location":"Setup-Guides/Development/Linux-Dev-Setup-Guide/#7-compile-code-running-bulletbot","text":"","title":"7. Compile Code &amp; Running BulletBot"},{"location":"Setup-Guides/Development/Linux-Dev-Setup-Guide/#71-compile-typescript-code","text":"Before running BulletBot, you first need to compile the TypeScript code into JavaScript code. To do this, open a new terminal (window), then execute tsc in the BulletBot directory. This will start the compiler in watch mode, which means it will automatically compile changes in the code.","title":"7.1. Compile TypeScript Code"},{"location":"Setup-Guides/Development/Linux-Dev-Setup-Guide/#72-running-bulletbot","text":"After all the code has compiled into JavaScript, you can now run BulletBot in your current session by executing node out/index.js in the BulletBot directory. You'll see information printed to the screen, displaying logs on BulletBot's startup. The logs should look similar to this: [24/10/2019 01:16:15.109] [INFO] [commands.js:null:52] loading 4 commands in out/commands/ [24/10/2019 01:16:15.111] [INFO] [commands.js:null:55] 1: help.js loaded! [24/10/2019 01:16:15.113] [INFO] [commands.js:null:55] 2: info.js loaded! [24/10/2019 01:16:15.115] [INFO] [commands.js:null:55] 3: ping.js loaded! [24/10/2019 01:16:15.116] [INFO] [commands.js:null:55] 4: status.js loaded! [24/10/2019 01:16:15.117] [INFO] [filters.js:null:54] loading 1 filters in out/filters/ [24/10/2019 01:16:15.118] [INFO] [filters.js:null:57] 1: kappa.js loaded! [24/10/2019 01:16:15.119] [INFO] [commands.js:null:52] loading 2 commands in out/commands/Fun/ [24/10/2019 01:16:15.122] [INFO] [commands.js:null:55] 1: abc.js loaded! [24/10/2019 01:16:15.125] [INFO] [commands.js:null:55] 2: animal.js loaded! [24/10/2019 01:16:15.126] [INFO] [commands.js:null:52] loading 9 commands in out/commands/Management/ [24/10/2019 01:16:15.127] [INFO] [commands.js:null:55] 1: admin.js loaded! [24/10/2019 01:16:15.128] [INFO] [commands.js:null:55] 2: commands.js loaded! [24/10/2019 01:16:15.130] [INFO] [commands.js:null:55] 3: filters.js loaded! [24/10/2019 01:16:15.131] [INFO] [commands.js:null:55] 4: immune.js loaded! [24/10/2019 01:16:15.132] [INFO] [commands.js:null:55] 5: log.js loaded! [24/10/2019 01:16:15.133] [INFO] [commands.js:null:55] 6: megalog.js loaded! [24/10/2019 01:16:15.135] [INFO] [commands.js:null:55] 7: mod.js loaded! [24/10/2019 01:16:15.136] [INFO] [commands.js:null:55] 8: prefix.js loaded! [24/10/2019 01:16:15.144] [INFO] [commands.js:null:55] 9: youtube.js loaded! [24/10/2019 01:16:15.144] [INFO] [commands.js:null:52] loading 7 commands in out/commands/Misc/ [24/10/2019 01:16:15.146] [INFO] [commands.js:null:55] 1: botsuggest.js loaded! [24/10/2019 01:16:15.147] [INFO] [commands.js:null:55] 2: bug.js loaded! [24/10/2019 01:16:15.148] [INFO] [commands.js:null:55] 3: channelinfo.js loaded! [24/10/2019 01:16:15.153] [INFO] [commands.js:null:55] 4: lmgtfy.js loaded! [24/10/2019 01:16:15.154] [INFO] [commands.js:null:55] 5: roleinfo.js loaded! [24/10/2019 01:16:15.155] [INFO] [commands.js:null:55] 6: serverinfo.js loaded! [24/10/2019 01:16:15.156] [INFO] [commands.js:null:55] 7: whois.js loaded! [24/10/2019 01:16:15.157] [INFO] [commands.js:null:52] loading 18 commands in out/commands/Moderation/ [24/10/2019 01:16:15.158] [INFO] [commands.js:null:55] 1: ban.js loaded! [24/10/2019 01:16:15.159] [INFO] [commands.js:null:55] 2: bans.js loaded! [24/10/2019 01:16:15.160] [INFO] [commands.js:null:55] 3: case.js loaded! [24/10/2019 01:16:15.162] [INFO] [commands.js:null:55] 4: casedelete.js loaded! [24/10/2019 01:16:15.163] [INFO] [commands.js:null:55] 5: kick.js loaded! [24/10/2019 01:16:15.166] [INFO] [commands.js:null:55] 6: lock.js loaded! [24/10/2019 01:16:15.169] [INFO] [commands.js:null:55] 7: locks.js loaded! [24/10/2019 01:16:15.171] [INFO] [commands.js:null:55] 8: mute.js loaded! [24/10/2019 01:16:15.172] [INFO] [commands.js:null:55] 9: mutes.js loaded! [24/10/2019 01:16:15.173] [INFO] [commands.js:null:55] 10: purge.js loaded! [24/10/2019 01:16:15.174] [INFO] [commands.js:null:55] 11: reason.js loaded! [24/10/2019 01:16:15.176] [INFO] [commands.js:null:55] 12: say.js loaded! [24/10/2019 01:16:15.177] [INFO] [commands.js:null:55] 13: softban.js loaded! [24/10/2019 01:16:15.179] [INFO] [commands.js:null:55] 14: unban.js loaded! [24/10/2019 01:16:15.180] [INFO] [commands.js:null:55] 15: unlock.js loaded! [24/10/2019 01:16:15.181] [INFO] [commands.js:null:55] 16: unmute.js loaded! [24/10/2019 01:16:15.185] [INFO] [commands.js:null:55] 17: warn.js loaded! [24/10/2019 01:16:15.186] [INFO] [commands.js:null:55] 18: warnings.js loaded! [24/10/2019 01:16:15.203] [LOG] [database.js:null:28] connected to /main database [24/10/2019 01:16:15.219] [INFO] [database.js:null:50] cleaning database every 600000ms [24/10/2019 01:16:15.220] [LOG] [mStats.js:null:30] connected to /mStats database [24/10/2019 01:16:15.235] [LOG] [logger.js:null:29] logger connected to /main database [24/10/2019 01:16:15.236] [LOG] [database.js:null:58] connected to /settings database [24/10/2019 01:16:15.237] [INFO] [database.js:null:66] updating global cache every 10000ms [24/10/2019 01:16:15.243] [LOG] [youtube.js:null:156] connected to /webhooks database [24/10/2019 01:16:15.244] [LOG] [pActions.js:null:28] pActions connected to /main database [24/10/2019 01:16:15.245] [LOG] [caseLogger.js:null:26] caseLogger connected to /main database [24/10/2019 01:16:15.248] [INFO] [mStats.js:init:79] Resolved 0 days in hourly collection. [24/10/2019 01:16:15.259] [INFO] [mStats.js:init:99] Using existing hour document [24/10/2019 01:16:17.542] [INFO] [index.js:null:119] Adding 0 guilds and removing 0 guilds [24/10/2019 01:16:17.543] [LOG] [index.js:null:127] I'm ready! If it doesn't work, check that you did everything correctly or ask for help in the BulletBot Discord server. If it did work, congratulations, you just set up your BulletBot dev environment. Now you can code and test your ideas.","title":"7.2. Running BulletBot"},{"location":"Setup-Guides/Development/Linux-Dev-Setup-Guide/#build-docs","text":"If you want to build the documentation with TypeDoc, create a directory called docs in the project directory, then run the following command in the BulletBot repo directory: typedoc --out ../docs/ ./src/ --tsconfig ./tsconfig.json --mode file --name BulletBot --readme ./README.md --media ./media/ Note You will have to have TypeDoc installed (refer to step 2). You will need to rebuild the documentation every time you want to update it to the new source.","title":"Build Docs"},{"location":"Setup-Guides/Development/Windows-Dev-Setup-Guide/","text":"Windows Development Setup Guide \u00b6 This guide will help you set up the BulletBot on your Windows PC so you can code and test new features. It will also of course show you how to compile the bot which, if you want to have a dev release, can be helpful. Getting Started \u00b6 1. Installing MongoDB And Node.js \u00b6 First, you will have to install the required software to compile and run the bot. BulletBot runs on Node.js and uses a MongoDB cluster to work. Download and install both via the links below: Node.js: https://nodejs.org/en/download/ (newest version, MSI, x64) MongoDB: https://www.mongodb.com/download-center/community (newest version, MSI, x64) (installing MongoDB Compass recommended) 2. Install Node.js Global Packages \u00b6 Now that you have Node.js you will also have to install TypeScript to be able to compile .ts files to .js files. Additionally, if you want you can download TypeDoc to build the source documentation. Open a terminal and type following commands: install TypeScript : npm install -g typescript install TypeDoc (optional): npm install -g typedoc 3. Setup Project Directory \u00b6 After everything is installed it's time to start putting in the files. 3.1. Folder Structure \u00b6 A recommended folder structure in your project folder would be the following: . \u251c\u2500\u2500 database (location of MongoDB cluster) \u251c\u2500\u2500 BulletBot (repo location) \u2514\u2500\u2500 docs (location of docs build by TypeDoc) Note The rest of this guide will assume you have this folder structure. 3.2. Cloning The Repo \u00b6 Clone the repo into the BulletBot directory by moving the working directory to the base and executing git clone https://github.com/CodeBullet-Community/BulletBot.git for the master branch or git clone -b [branch name] --single-branch https://github.com/CodeBullet-Community/BulletBot.git for another branch. This will create the BulletBot folder with the selected branch in it. 4. Installing Node.js Local Packages \u00b6 Now that the BulletBot repo has been downloaded, you'll need to install the rest of the Node.js packages locally. Inside the BulletBot repo directory, execute: npm install 5. Setting Up The MongoDB Cluster \u00b6 In this guide, the cluster is set up without any authentication or replication. The version running on the server does have those two things and it is also highly recommended for anyone running the bot on a server, so keep this in mind while developing. 5.1. Starting The Cluster \u00b6 Create the database directory and start the MongoDB cluster using mongod --port [port] --dbpath [absolute path to database dir]` (default port 27017) If it can't find the command you will have to manually add it to PATH. The cluster is ready when it prints out [initandlisten] waiting for connections (might not be the last line it prints out). Don't kill the process as this would kill the cluster. 5.2. Inserting Settings Document \u00b6 BulletBot needs a settings document in the database to work. The difference between the bot-config.json and this document is that the settings in here can be changed while it's running and doesn't require a restart. Open mongo shell: mongo --port [port] (default port 27017) Switch to the settings collection: use settings Insert the following document: db.settings.insert([document]) { \"prefix\" : \"?!\" , \"embedColors\" : { \"default\" : 8311585 , \"help\" : 8311585 , \"neutral\" : 4868682 , \"negative\" : 15805477 , \"warn\" : 16086051 , \"positive\" : 8311585 }, \"botMasters\" : [ \"[user ID of bot masters]\" ], \"commands\" : { \"animal\" : { \"apis\" : { \"cat\" : \"https://some-random-api.ml/img/cat\" , \"dog\" : \"https://some-random-api.ml/img/dog\" , \"fox\" : \"https://some-random-api.ml/img/fox\" , \"panda\" : \"https://some-random-api.ml/img/panda\" , \"red-panda\" : \"https://some-random-api.ml/img/red_panda\" , \"bird\" : \"https://some-random-api.ml/img/birb\" , \"pikachu\" : \"https://some-random-api.ml/pikachuimg\" } }, \"purge\" : { \"maxMessages\" : 1000 } } } 6. Add Bot Config \u00b6 Additionally to the settings document the bot has, as mentioned above, a bot-config.json . Put the following template into BulletBot/out/bot-config.json : { \"version\" : \"v[version number]\" , \"botToken\" : \"[bot token]\" , \"cluster\" : { \"url\" : \"mongodb://localhost:[port]\" , \"suffix\" : \"\" }, \"googleAPIKey\" : \"[optional Google API key]\" , \"globalUpdateInterval\" : 10000 , \"cleanInterval\" : 600000 , \"pActionsInterval\" : 1000 , \"YTResubInterval\" : 259200000 , \"crashProof\" : { \"file\" : \"../crashProof.time\" , \"interval\" : 10000 }, \"callback\" : { \"URL\" : \"[ip address or domain name]\" , \"port\" : 8000 , \"path\" : \"/webhooks\" }, \"youtube\" : { \"logo\" : \"https://www.android-user.de/wp-content/uploads/2018/07/icon-youtobe.png\" , \"color\" : 16711680 , \"name\" : \"YouTube\" } } Note The Google API key and callback is only required when you want to use webhooks 7. Run Bot \u00b6 7.1. Compile TypeScript Code \u00b6 Before running the bot you first need to compile the TypeScript code into js code. To do this open a new terminal and move into the BulletBot directory. Then do tsc and just let it run. This will start the compiler in watch mode, which means it will automatically compile changes in the TypeScript code. 7.2. Running BulletBot \u00b6 Now after all this setup you can finally run BulletBot by doing node out/index.js in the BulletBot directory. You should see your bot getting only and having a I'm ready! presence. The logs should look similar to this: [14/09/2019 15:50:52.194] [INFO] [database.js:Database:59] updating global cache every 10000ms [14/09/2019 15:50:52.198] [INFO] [database.js:Database:67] cleaning database every 600000ms [14/09/2019 15:50:52.232] [LOG] [catcher.js:Catcher.server.app.listen:21] catcher listening to port 8000 [14/09/2019 15:50:52.236] [INFO] [commands.js:fs.readdir:52] loading 4 commands in out/commands/ [14/09/2019 15:50:52.239] [INFO] [commands.js:commands.forEach:55] 1: help.js loaded! [14/09/2019 15:50:52.240] [INFO] [commands.js:commands.forEach:55] 2: info.js loaded! [14/09/2019 15:50:52.242] [INFO] [commands.js:commands.forEach:55] 3: ping.js loaded! [14/09/2019 15:50:52.243] [INFO] [commands.js:commands.forEach:55] 4: status.js loaded! [14/09/2019 15:50:52.244] [INFO] [filters.js:fs.readdir:54] loading 1 filters in out/filters/ [14/09/2019 15:50:52.246] [INFO] [filters.js:filters.forEach:57] 1: kappa.js loaded! [14/09/2019 15:50:52.247] [INFO] [commands.js:fs.readdir:52] loading 2 commands in out/commands/Fun/ [14/09/2019 15:50:52.249] [INFO] [commands.js:commands.forEach:55] 1: abc.js loaded! [14/09/2019 15:50:52.253] [INFO] [commands.js:commands.forEach:55] 2: animal.js loaded! [14/09/2019 15:50:52.254] [INFO] [commands.js:fs.readdir:52] loading 7 commands in out/commands/Misc/ [14/09/2019 15:50:52.257] [INFO] [commands.js:commands.forEach:55] 1: botsuggest.js loaded! [14/09/2019 15:50:52.259] [INFO] [commands.js:commands.forEach:55] 2: bug.js loaded! [14/09/2019 15:50:52.261] [INFO] [commands.js:commands.forEach:55] 3: channelinfo.js loaded! [14/09/2019 15:50:52.265] [INFO] [commands.js:commands.forEach:55] 4: lmgtfy.js loaded! [14/09/2019 15:50:52.267] [INFO] [commands.js:commands.forEach:55] 5: roleinfo.js loaded! [14/09/2019 15:50:52.268] [INFO] [commands.js:commands.forEach:55] 6: serverinfo.js loaded! [14/09/2019 15:50:52.270] [INFO] [commands.js:commands.forEach:55] 7: whois.js loaded! [14/09/2019 15:50:52.271] [INFO] [commands.js:fs.readdir:52] loading 9 commands in out/commands/Management/ [14/09/2019 15:50:52.273] [INFO] [commands.js:commands.forEach:55] 1: admin.js loaded! [14/09/2019 15:50:52.275] [INFO] [commands.js:commands.forEach:55] 2: commands.js loaded! [14/09/2019 15:50:52.276] [INFO] [commands.js:commands.forEach:55] 3: filters.js loaded! [14/09/2019 15:50:52.278] [INFO] [commands.js:commands.forEach:55] 4: immune.js loaded! [14/09/2019 15:50:52.280] [INFO] [commands.js:commands.forEach:55] 5: log.js loaded! [14/09/2019 15:50:52.282] [INFO] [commands.js:commands.forEach:55] 6: megalog.js loaded! [14/09/2019 15:50:52.283] [INFO] [commands.js:commands.forEach:55] 7: mod.js loaded! [14/09/2019 15:50:52.284] [INFO] [commands.js:commands.forEach:55] 8: prefix.js loaded! [14/09/2019 15:50:52.286] [INFO] [commands.js:commands.forEach:55] 9: youtube.js loaded! [14/09/2019 15:50:52.288] [INFO] [commands.js:fs.readdir:52] loading 18 commands in out/commands/Moderation/ [14/09/2019 15:50:52.290] [INFO] [commands.js:commands.forEach:55] 1: ban.js loaded! [14/09/2019 15:50:52.292] [INFO] [commands.js:commands.forEach:55] 2: bans.js loaded! [14/09/2019 15:50:52.294] [INFO] [commands.js:commands.forEach:55] 3: case.js loaded! [14/09/2019 15:50:52.295] [INFO] [commands.js:commands.forEach:55] 4: casedelete.js loaded! [14/09/2019 15:50:52.297] [INFO] [commands.js:commands.forEach:55] 5: kick.js loaded! [14/09/2019 15:50:52.298] [INFO] [commands.js:commands.forEach:55] 6: lock.js loaded! [14/09/2019 15:50:52.300] [INFO] [commands.js:commands.forEach:55] 7: locks.js loaded! [14/09/2019 15:50:52.301] [INFO] [commands.js:commands.forEach:55] 8: mute.js loaded! [14/09/2019 15:50:52.303] [INFO] [commands.js:commands.forEach:55] 9: mutes.js loaded! [14/09/2019 15:50:52.305] [INFO] [commands.js:commands.forEach:55] 10: purge.js loaded! [14/09/2019 15:50:52.306] [INFO] [commands.js:commands.forEach:55] 11: reason.js loaded! [14/09/2019 15:50:52.308] [INFO] [commands.js:commands.forEach:55] 12: say.js loaded! [14/09/2019 15:50:52.309] [INFO] [commands.js:commands.forEach:55] 13: softban.js loaded! [14/09/2019 15:50:52.311] [INFO] [commands.js:commands.forEach:55] 14: unban.js loaded! [14/09/2019 15:50:52.313] [INFO] [commands.js:commands.forEach:55] 15: unlock.js loaded! [14/09/2019 15:50:52.314] [INFO] [commands.js:commands.forEach:55] 16: unmute.js loaded! [14/09/2019 15:50:52.316] [INFO] [commands.js:commands.forEach:55] 17: warn.js loaded! [14/09/2019 15:50:52.317] [INFO] [commands.js:commands.forEach:55] 18: warnings.js loaded! [14/09/2019 15:50:53.272] [LOG] [mStats.js:null:30] connected to /mStats database [14/09/2019 15:50:53.279] [LOG] [logger.js:null:29] logger connected to /main database [14/09/2019 15:50:53.280] [LOG] [database.js:null:50] connected to /settings database [14/09/2019 15:50:53.285] [LOG] [caseLogger.js:null:26] caseLogger connected to /main database [14/09/2019 15:50:53.286] [LOG] [database.js:null:28] connected to /main database [14/09/2019 15:50:53.287] [LOG] [youtube.js:null:154] connected to /webhooks database [14/09/2019 15:50:53.288] [LOG] [pActions.js:null:28] pActions connected to /main database [14/09/2019 15:50:53.344] [INFO] [mStats.js:init:79] Resolved 1 days in hourly collection. [14/09/2019 15:50:56.301] [INFO] [index.js:client.on:117] Adding 0 guilds and removing 0 guilds [14/09/2019 15:50:56.302] [LOG] [index.js:client.on:125] I'm ready! If it doesn't work check if you did everything correctly or ask in the discord server for help. If it did work then congratulations you just set up your dev environment for BulletBot. Now you can code your ideas away. Build docs \u00b6 If you want to build the documentation with TypeDoc run the following command in the BulletBot repo directory. typedoc --out ..\\docs\\ .\\src\\ --tsconfig .\\tsconfig.json --mode file --name BulletBot --readme .\\README.md --media .\\media\\ Note You will have to have TypeDoc installed (look in 2) You will need to rebuild the documentation every time you want to update it to the new source","title":"Windows"},{"location":"Setup-Guides/Development/Windows-Dev-Setup-Guide/#windows-development-setup-guide","text":"This guide will help you set up the BulletBot on your Windows PC so you can code and test new features. It will also of course show you how to compile the bot which, if you want to have a dev release, can be helpful.","title":"Windows Development Setup Guide"},{"location":"Setup-Guides/Development/Windows-Dev-Setup-Guide/#getting-started","text":"","title":"Getting Started"},{"location":"Setup-Guides/Development/Windows-Dev-Setup-Guide/#1-installing-mongodb-and-nodejs","text":"First, you will have to install the required software to compile and run the bot. BulletBot runs on Node.js and uses a MongoDB cluster to work. Download and install both via the links below: Node.js: https://nodejs.org/en/download/ (newest version, MSI, x64) MongoDB: https://www.mongodb.com/download-center/community (newest version, MSI, x64) (installing MongoDB Compass recommended)","title":"1. Installing MongoDB And Node.js"},{"location":"Setup-Guides/Development/Windows-Dev-Setup-Guide/#2-install-nodejs-global-packages","text":"Now that you have Node.js you will also have to install TypeScript to be able to compile .ts files to .js files. Additionally, if you want you can download TypeDoc to build the source documentation. Open a terminal and type following commands: install TypeScript : npm install -g typescript install TypeDoc (optional): npm install -g typedoc","title":"2. Install Node.js Global Packages"},{"location":"Setup-Guides/Development/Windows-Dev-Setup-Guide/#3-setup-project-directory","text":"After everything is installed it's time to start putting in the files.","title":"3. Setup Project Directory"},{"location":"Setup-Guides/Development/Windows-Dev-Setup-Guide/#31-folder-structure","text":"A recommended folder structure in your project folder would be the following: . \u251c\u2500\u2500 database (location of MongoDB cluster) \u251c\u2500\u2500 BulletBot (repo location) \u2514\u2500\u2500 docs (location of docs build by TypeDoc) Note The rest of this guide will assume you have this folder structure.","title":"3.1. Folder Structure"},{"location":"Setup-Guides/Development/Windows-Dev-Setup-Guide/#32-cloning-the-repo","text":"Clone the repo into the BulletBot directory by moving the working directory to the base and executing git clone https://github.com/CodeBullet-Community/BulletBot.git for the master branch or git clone -b [branch name] --single-branch https://github.com/CodeBullet-Community/BulletBot.git for another branch. This will create the BulletBot folder with the selected branch in it.","title":"3.2. Cloning The Repo"},{"location":"Setup-Guides/Development/Windows-Dev-Setup-Guide/#4-installing-nodejs-local-packages","text":"Now that the BulletBot repo has been downloaded, you'll need to install the rest of the Node.js packages locally. Inside the BulletBot repo directory, execute: npm install","title":"4. Installing Node.js Local Packages"},{"location":"Setup-Guides/Development/Windows-Dev-Setup-Guide/#5-setting-up-the-mongodb-cluster","text":"In this guide, the cluster is set up without any authentication or replication. The version running on the server does have those two things and it is also highly recommended for anyone running the bot on a server, so keep this in mind while developing.","title":"5. Setting Up The MongoDB Cluster"},{"location":"Setup-Guides/Development/Windows-Dev-Setup-Guide/#51-starting-the-cluster","text":"Create the database directory and start the MongoDB cluster using mongod --port [port] --dbpath [absolute path to database dir]` (default port 27017) If it can't find the command you will have to manually add it to PATH. The cluster is ready when it prints out [initandlisten] waiting for connections (might not be the last line it prints out). Don't kill the process as this would kill the cluster.","title":"5.1. Starting The Cluster"},{"location":"Setup-Guides/Development/Windows-Dev-Setup-Guide/#52-inserting-settings-document","text":"BulletBot needs a settings document in the database to work. The difference between the bot-config.json and this document is that the settings in here can be changed while it's running and doesn't require a restart. Open mongo shell: mongo --port [port] (default port 27017) Switch to the settings collection: use settings Insert the following document: db.settings.insert([document]) { \"prefix\" : \"?!\" , \"embedColors\" : { \"default\" : 8311585 , \"help\" : 8311585 , \"neutral\" : 4868682 , \"negative\" : 15805477 , \"warn\" : 16086051 , \"positive\" : 8311585 }, \"botMasters\" : [ \"[user ID of bot masters]\" ], \"commands\" : { \"animal\" : { \"apis\" : { \"cat\" : \"https://some-random-api.ml/img/cat\" , \"dog\" : \"https://some-random-api.ml/img/dog\" , \"fox\" : \"https://some-random-api.ml/img/fox\" , \"panda\" : \"https://some-random-api.ml/img/panda\" , \"red-panda\" : \"https://some-random-api.ml/img/red_panda\" , \"bird\" : \"https://some-random-api.ml/img/birb\" , \"pikachu\" : \"https://some-random-api.ml/pikachuimg\" } }, \"purge\" : { \"maxMessages\" : 1000 } } }","title":"5.2. Inserting Settings Document"},{"location":"Setup-Guides/Development/Windows-Dev-Setup-Guide/#6-add-bot-config","text":"Additionally to the settings document the bot has, as mentioned above, a bot-config.json . Put the following template into BulletBot/out/bot-config.json : { \"version\" : \"v[version number]\" , \"botToken\" : \"[bot token]\" , \"cluster\" : { \"url\" : \"mongodb://localhost:[port]\" , \"suffix\" : \"\" }, \"googleAPIKey\" : \"[optional Google API key]\" , \"globalUpdateInterval\" : 10000 , \"cleanInterval\" : 600000 , \"pActionsInterval\" : 1000 , \"YTResubInterval\" : 259200000 , \"crashProof\" : { \"file\" : \"../crashProof.time\" , \"interval\" : 10000 }, \"callback\" : { \"URL\" : \"[ip address or domain name]\" , \"port\" : 8000 , \"path\" : \"/webhooks\" }, \"youtube\" : { \"logo\" : \"https://www.android-user.de/wp-content/uploads/2018/07/icon-youtobe.png\" , \"color\" : 16711680 , \"name\" : \"YouTube\" } } Note The Google API key and callback is only required when you want to use webhooks","title":"6. Add Bot Config"},{"location":"Setup-Guides/Development/Windows-Dev-Setup-Guide/#7-run-bot","text":"","title":"7. Run Bot"},{"location":"Setup-Guides/Development/Windows-Dev-Setup-Guide/#71-compile-typescript-code","text":"Before running the bot you first need to compile the TypeScript code into js code. To do this open a new terminal and move into the BulletBot directory. Then do tsc and just let it run. This will start the compiler in watch mode, which means it will automatically compile changes in the TypeScript code.","title":"7.1. Compile TypeScript Code"},{"location":"Setup-Guides/Development/Windows-Dev-Setup-Guide/#72-running-bulletbot","text":"Now after all this setup you can finally run BulletBot by doing node out/index.js in the BulletBot directory. You should see your bot getting only and having a I'm ready! presence. The logs should look similar to this: [14/09/2019 15:50:52.194] [INFO] [database.js:Database:59] updating global cache every 10000ms [14/09/2019 15:50:52.198] [INFO] [database.js:Database:67] cleaning database every 600000ms [14/09/2019 15:50:52.232] [LOG] [catcher.js:Catcher.server.app.listen:21] catcher listening to port 8000 [14/09/2019 15:50:52.236] [INFO] [commands.js:fs.readdir:52] loading 4 commands in out/commands/ [14/09/2019 15:50:52.239] [INFO] [commands.js:commands.forEach:55] 1: help.js loaded! [14/09/2019 15:50:52.240] [INFO] [commands.js:commands.forEach:55] 2: info.js loaded! [14/09/2019 15:50:52.242] [INFO] [commands.js:commands.forEach:55] 3: ping.js loaded! [14/09/2019 15:50:52.243] [INFO] [commands.js:commands.forEach:55] 4: status.js loaded! [14/09/2019 15:50:52.244] [INFO] [filters.js:fs.readdir:54] loading 1 filters in out/filters/ [14/09/2019 15:50:52.246] [INFO] [filters.js:filters.forEach:57] 1: kappa.js loaded! [14/09/2019 15:50:52.247] [INFO] [commands.js:fs.readdir:52] loading 2 commands in out/commands/Fun/ [14/09/2019 15:50:52.249] [INFO] [commands.js:commands.forEach:55] 1: abc.js loaded! [14/09/2019 15:50:52.253] [INFO] [commands.js:commands.forEach:55] 2: animal.js loaded! [14/09/2019 15:50:52.254] [INFO] [commands.js:fs.readdir:52] loading 7 commands in out/commands/Misc/ [14/09/2019 15:50:52.257] [INFO] [commands.js:commands.forEach:55] 1: botsuggest.js loaded! [14/09/2019 15:50:52.259] [INFO] [commands.js:commands.forEach:55] 2: bug.js loaded! [14/09/2019 15:50:52.261] [INFO] [commands.js:commands.forEach:55] 3: channelinfo.js loaded! [14/09/2019 15:50:52.265] [INFO] [commands.js:commands.forEach:55] 4: lmgtfy.js loaded! [14/09/2019 15:50:52.267] [INFO] [commands.js:commands.forEach:55] 5: roleinfo.js loaded! [14/09/2019 15:50:52.268] [INFO] [commands.js:commands.forEach:55] 6: serverinfo.js loaded! [14/09/2019 15:50:52.270] [INFO] [commands.js:commands.forEach:55] 7: whois.js loaded! [14/09/2019 15:50:52.271] [INFO] [commands.js:fs.readdir:52] loading 9 commands in out/commands/Management/ [14/09/2019 15:50:52.273] [INFO] [commands.js:commands.forEach:55] 1: admin.js loaded! [14/09/2019 15:50:52.275] [INFO] [commands.js:commands.forEach:55] 2: commands.js loaded! [14/09/2019 15:50:52.276] [INFO] [commands.js:commands.forEach:55] 3: filters.js loaded! [14/09/2019 15:50:52.278] [INFO] [commands.js:commands.forEach:55] 4: immune.js loaded! [14/09/2019 15:50:52.280] [INFO] [commands.js:commands.forEach:55] 5: log.js loaded! [14/09/2019 15:50:52.282] [INFO] [commands.js:commands.forEach:55] 6: megalog.js loaded! [14/09/2019 15:50:52.283] [INFO] [commands.js:commands.forEach:55] 7: mod.js loaded! [14/09/2019 15:50:52.284] [INFO] [commands.js:commands.forEach:55] 8: prefix.js loaded! [14/09/2019 15:50:52.286] [INFO] [commands.js:commands.forEach:55] 9: youtube.js loaded! [14/09/2019 15:50:52.288] [INFO] [commands.js:fs.readdir:52] loading 18 commands in out/commands/Moderation/ [14/09/2019 15:50:52.290] [INFO] [commands.js:commands.forEach:55] 1: ban.js loaded! [14/09/2019 15:50:52.292] [INFO] [commands.js:commands.forEach:55] 2: bans.js loaded! [14/09/2019 15:50:52.294] [INFO] [commands.js:commands.forEach:55] 3: case.js loaded! [14/09/2019 15:50:52.295] [INFO] [commands.js:commands.forEach:55] 4: casedelete.js loaded! [14/09/2019 15:50:52.297] [INFO] [commands.js:commands.forEach:55] 5: kick.js loaded! [14/09/2019 15:50:52.298] [INFO] [commands.js:commands.forEach:55] 6: lock.js loaded! [14/09/2019 15:50:52.300] [INFO] [commands.js:commands.forEach:55] 7: locks.js loaded! [14/09/2019 15:50:52.301] [INFO] [commands.js:commands.forEach:55] 8: mute.js loaded! [14/09/2019 15:50:52.303] [INFO] [commands.js:commands.forEach:55] 9: mutes.js loaded! [14/09/2019 15:50:52.305] [INFO] [commands.js:commands.forEach:55] 10: purge.js loaded! [14/09/2019 15:50:52.306] [INFO] [commands.js:commands.forEach:55] 11: reason.js loaded! [14/09/2019 15:50:52.308] [INFO] [commands.js:commands.forEach:55] 12: say.js loaded! [14/09/2019 15:50:52.309] [INFO] [commands.js:commands.forEach:55] 13: softban.js loaded! [14/09/2019 15:50:52.311] [INFO] [commands.js:commands.forEach:55] 14: unban.js loaded! [14/09/2019 15:50:52.313] [INFO] [commands.js:commands.forEach:55] 15: unlock.js loaded! [14/09/2019 15:50:52.314] [INFO] [commands.js:commands.forEach:55] 16: unmute.js loaded! [14/09/2019 15:50:52.316] [INFO] [commands.js:commands.forEach:55] 17: warn.js loaded! [14/09/2019 15:50:52.317] [INFO] [commands.js:commands.forEach:55] 18: warnings.js loaded! [14/09/2019 15:50:53.272] [LOG] [mStats.js:null:30] connected to /mStats database [14/09/2019 15:50:53.279] [LOG] [logger.js:null:29] logger connected to /main database [14/09/2019 15:50:53.280] [LOG] [database.js:null:50] connected to /settings database [14/09/2019 15:50:53.285] [LOG] [caseLogger.js:null:26] caseLogger connected to /main database [14/09/2019 15:50:53.286] [LOG] [database.js:null:28] connected to /main database [14/09/2019 15:50:53.287] [LOG] [youtube.js:null:154] connected to /webhooks database [14/09/2019 15:50:53.288] [LOG] [pActions.js:null:28] pActions connected to /main database [14/09/2019 15:50:53.344] [INFO] [mStats.js:init:79] Resolved 1 days in hourly collection. [14/09/2019 15:50:56.301] [INFO] [index.js:client.on:117] Adding 0 guilds and removing 0 guilds [14/09/2019 15:50:56.302] [LOG] [index.js:client.on:125] I'm ready! If it doesn't work check if you did everything correctly or ask in the discord server for help. If it did work then congratulations you just set up your dev environment for BulletBot. Now you can code your ideas away.","title":"7.2. Running BulletBot"},{"location":"Setup-Guides/Development/Windows-Dev-Setup-Guide/#build-docs","text":"If you want to build the documentation with TypeDoc run the following command in the BulletBot repo directory. typedoc --out ..\\docs\\ .\\src\\ --tsconfig .\\tsconfig.json --mode file --name BulletBot --readme .\\README.md --media .\\media\\ Note You will have to have TypeDoc installed (look in 2) You will need to rebuild the documentation every time you want to update it to the new source","title":"Build docs"},{"location":"Setup-Guides/Production/Linux-Prod-Setup-Guide/","text":"Linux Production Setup Guide \u00b6 This setup guide will instruct and explain the process in which BulletBot is set up on a Linux based distribution. The majority of the setup is taken care of by the installers, which will automate the installation and set up of the prerequisites. That said, there is a small portion of this guide that requires manual set up. If you are doing dev work on BulletBot or just want to set him up manually, please follow the Linux Dev Setup Guide . Officially Supported Linux Distributions \u00b6 Below is a list of Linux Distributions that BulletBot is officially supported on. Distributions Distro Versions Architecture Ubuntu 16.04 18.04 64 bit - (ARM64 not supported) Debian 9 10 64 bit RHEL 7 8 64 bit CentOS 7 8 64 bit Versions of MongoDB and Node.js Installed \u00b6 These are the versions of MongoDB and Node.js that are installed via the installers: MongoDB: Version 4.2.x Node.js: Version 14.x Getting Started \u00b6 To start the setup process, first download the master installer: cd ~/ && wget -N https://raw.githubusercontent.com/CodeBullet-Community/BulletBot/release/linux-master-installer.sh && sudo chmod +x linux-master-installer.sh Execute the master installer using sudo bash linux-master-installer.sh , then download BulletBot via option 1 in the installer menu. Running the Master Installer for the First Time \u00b6 When running the master installer for the first time, a system user called bulletbot will be created (see the In-Depth Explanations wiki for more info). All code used by/for BulletBot will then be moved into /home/bulletbot . Setting Up and Installing Prerequisites \u00b6 The installers automatically detect whether or not the prerequisites have been installed or set up. If it detects that some or all have not been installed/set up, you'll be prompt a menu that looks similar to the one below: The menu will indicate whether or not a particular prerequisite is installed/set up. To install a missing prerequisite, enter the number corresponding to that option. Below, you will find information on what each option (excluding options 1 and 6) does and any additional or essential information associated with the option in question. 2. Install MongoDB \u00b6 Option 2 installs, enables, and start MongoDB. It is important to know that it does NOT set up the MongoDB settings document . The settings document can be added to the database after all the other prerequisites have been installed/set up but must be taken care of before running BulletBot. 3. Install Node.js (will also perform the actions of option 4) \u00b6 Option 3 installs Node.js, node, and npm. As you might have read in the description of this option, it will also install the required packages and dependencies that would otherwise be installed via option 4. 4. Install required packages and dependencies \u00b6 Option 4 installs the required packages and dependencies in a folder called node_modules in /home/bulletbot . Because option 3 already takes care of this, it is unlikely that you'll need to use this option, but is provided as a failsafe, just in case something happens to the packages and dependencies. 5. Set up BulletBot config file \u00b6 Option 5 requires you to enter information such as the bot key, MongoDB URL, and so on. This information will be placed into BulletBot's configuration file ( bot-config.json ). First and foremost, if you haven't already created an application/bot , do so now. You'll need the bot key that is generated when setting up BulletBot's config file. Once you have done this, you can continue and set up the config file. 5.1. Setting Up bot-config.json WITHOUT MongoDB Authentication \u00b6 If you prefer to set BulletBot up WITHOUT MongoDB Authentication (which is not recommended), configurations for the config file are rather straight forward. Enter bot token: The bot token should look similar to: 1h90B4mpNDU5Mzg24jsmNTQ0.X1m.pJ-Rrgz-1OY-3iIdaynmLiGwqErAoIc . For help on finding and coping the bot token for your application, follow this guide . Enter the MongoDB URL (i.e. mongodb://localhost:[port]): If you don't plan on doing anything fancy with MongoDB (i.e., replication, etc.), you can leave this field blank, and the default MongoDB URL ( mongodb://localhost:27017 ) will automatically be used. Though if you plan to do some advanced things with MongoDB, use this link to help you properly configure the URL. Enter the MongoDB URL suffix (i.e. ?authSource=admin): Similar to field 2, unless you are doing some fancy stuff with MongoDB, you can leave this field blank. Enter the Google API Key: The Google API Key should look similar to: PaTZgFgtywVH6FFq8A5W3gSvT5f15SObwZj29Ia0 For help on creating a Google API Key, follow the instructions in this guide . Note that if you leave this field empty, you will not be able to use any services and commands that rely on Google services (i.e., webhooks). Here is an example of what it might look like: 5.2. Setting Up bot-config.json WITH MongoDB Authentication \u00b6 If you want to use authentication in combination with MongoDB (which is highly recommended), the configurations for the config file will be a little different compared to if you were to use MongoDB without authentication. Fields 1 and 4 Please refer above for information on fields 1 and 4, as they are the same no matter if authentication is enabled or disabled. N/A Enter the MongoDB URL (i.e. mongodb://localhost:[port]): When using authentication, this field cannot be left empty. At the bare minimum, you must enter mongodb://bulletbot:[bulletbot MongoDB password]@localhost:[port] . More can be added to the URL, but what is shown is the bare minimum for what the suffix can be. Replace [bulletbot MongoDB password] with a password that you'll be giving the bulletbot user when setting up MongoDB Authentication . Replace [port] with the port number that MongoDB/mongod.service will be using (default port is 27017 ). Please note that if you are using a firewall, you'll need to allow incoming traffic through the port that mongod.service will use. If you plan on doing some advanced things with MongoDB, use this link to help you properly configure the URL. Enter the MongoDB URL suffix (i.e. ?authSource=admin): Similar to field 2, this field cannot be left empty. At the bare minimum, you must enter ?authSource=admin . More can be added to the suffix, but what is shown is the bare minimum for what the suffix can be. N/A Here is an example of what it might look like: 5.3 Webhooks \u00b6 By default, webhooks run on port 8000. So if you have a firewall running, make sure that you open port 8000. Please note that if your public IP Address is not static, it will not be possible to use webhooks. Setting Up MongoDB \u00b6 At this point, MongoDB should already be installed, enabled, and running. Below are instructions on how to change the default port MongoDB uses (optional), add the MongoDB settings document (required), and set up MongoDB Authentication (optional). Changing MongoDB's Default Port \u00b6 MongoDB uses port 27017 by default. If you want to change what port MongoDB runs on, you will need to modify its config file. Follow the instructions below to change the port MongoDB runs on: Open /etc/mongod.conf with root privilege, using your favorite editor. Navigate to the line containing something similar to port: 27017 Replace 27017 with the port number that you would like MongoDB to run on. Save and exit the file. Restart mongod.service: sudo systemctl restart mongod Adding the MongoDB Settings Document \u00b6 BulletBot needs a settings document placed in the database to work. This document is similar to bot-config.json , but whereas the JSON file requires BulletBot to be a restart for any changes to be applied, changes to the settings document take immediate effect. Before adding the document, make sure to add your Discord user ID to the botMasters field. The ID should be a long string of numbers similar to 516213540576277819 . Follow the instructions below to add the settings document to the MongoDB database: Open the mongo shell: mongo --port [port] Switch to the settings collection: use settings Insert the following document: db.settings.insert( { \"prefix\" : \"?!\" , \"presence\" : { \"status\" : \"online\" , \"game\" : { \"name\" : \"?!help\" , \"type\" : \"Playing\" } }, \"embedColors\" : { \"default\" : 8311585 , \"help\" : 8311585 , \"neutral\" : 4868682 , \"negative\" : 15805477 , \"warn\" : 16086051 , \"positive\" : 8311585 }, \"botMasters\" : [ \"[user ID of bot masters]\" ], \"commands\" : { \"animal\" : { \"apis\" : { \"cat\" : \"https://some-random-api.ml/img/cat\" , \"dog\" : \"https://some-random-api.ml/img/dog\" , \"fox\" : \"https://some-random-api.ml/img/fox\" , \"panda\" : \"https://some-random-api.ml/img/panda\" , \"red-panda\" : \"https://some-random-api.ml/img/red_panda\" , \"bird\" : \"https://some-random-api.ml/img/birb\" , \"pikachu\" : \"https://some-random-api.ml/pikachuimg\" } }, \"purge\" : { \"maxMessages\" : 1000 } } } ) Something similar to WriteResult({ \"nInserted\" : 1 }) will be printed to the screen if the settings were successfully added to the database. Exit the mongo shell: exit Adding Authentication \u00b6 Enabling authentication causes MongoDB to require all users who connect to the database to authenticate/login to an existing user in the database. It is highly recommended that you enable this feature so that the cluster is secure and so that you can remotely access it, for example, with MongoDB Compass . Info For instructions on how to use/setup MongoDB Compass, follow this guide . Follow the instructions below to enable authentication. Make sure to replace [admin password] with a password you'll remember, and [bulletbot password] with the password you used when setting up BulletBot's config file. Open mongo shell: mongo --port [port] Switch to the admin database, which stores all users: use admin Create an admin user: db.createUser( { user: \"admin\" , pwd: \"[admin password]\" , roles: [ { \"role\" : \"userAdminAnyDatabase\" , \"db\" : \"admin\" } , { \"role\" : \"readWriteAnyDatabase\" , \"db\" : \"admin\" } , { \"role\" : \"clusterAdmin\" , \"db\" : \"admin\" } ] } ) Create a user for BulletBot: db.createUser( { user: \"bulletbot\" , pwd: \"[bulletbot password]\" , roles: [ { \"role\" : \"readWrite\" , \"db\" : \"main\" } , { \"role\" : \"readWrite\" , \"db\" : \"webhooks\" } , { \"role\" : \"readWrite\" , \"db\" : \"mStats\" } , { \"role\" : \"read\" , \"db\" : \"settings\" } ] } ) Check if both users were added with db.getUsers() . The output should look like this: [ { \"_id\" : \"admin.admin\" , \"userId\" : UUID( \"[some id]\" ) , \"user\" : \"admin\" , \"db\" : \"admin\" , \"roles\" : [ { \"role\" : \"userAdminAnyDatabase\" , \"db\" : \"admin\" }, { \"role\" : \"readWriteAnyDatabase\" , \"db\" : \"admin\" }, { \"role\" : \"clusterAdmin\" , \"db\" : \"admin\" } ], \"mechanisms\" : [ \"SCRAM-SHA-1\" , \"SCRAM-SHA-256\" ] }, { \"_id\" : \"admin.bulletbot\" , \"userId\" : UUID( \"[some id]\" ) , \"user\" : \"bulletbot\" , \"db\" : \"admin\" , \"roles\" : [ { \"role\" : \"readWrite\" , \"db\" : \"main\" }, { \"role\" : \"readWrite\" , \"db\" : \"webhooks\" }, { \"role\" : \"readWrite\" , \"db\" : \"mStats\" }, { \"role\" : \"read\" , \"db\" : \"settings\" } ], \"mechanisms\" : [ \"SCRAM-SHA-1\" , \"SCRAM-SHA-256\" ] } ] Exit the mongo shell: exit If you have the cluster running with replication enabled, you will have to add a key file. To do this, do the following: openssl rand -base64 756 > [ path to key file ] chmod 400 [ path to key file ] chown mongodb:root [ path to key file ] It's recommended that the key file is placed in the same directory as the mongod.conf file (default at /etc/mongod.conf ) and is named mongod.key . You will also have to copy the key file to the other servers and repeat the chmod and chown command. Open /etc/mongod.conf with root privilege, using your favorite editor, and add the following: security : authorization : \"enabled\" keyFile : \"[path to key file]\" ## (only add this line when replication is enabled) If there is already a security property, just append the authorization property to it or change it to enabled. If replication is enabled, you will have to change the same stuff in the other config files on the other servers. Restart mongod.service: sudo systemctl restart mongod Note In this guide, we only add the admin and bulletbot users. If you want, you can add other users to it, which shouldn't affect the bot. Running BulletBot \u00b6 Info A more in-depth look at the run modes can be read in the In-Depth Explanations wiki. Run Modes \u00b6 BulletBot can be run in two different modes: Run BulletBot in the background This mode runs BulletBot in the background of the system. If the system is rebooted, BulletBot will NOT be started on system reboot. Run BulletBot in the background with auto-restart This mode runs BulletBot in the background of the system. Though unlike the first run mode, if the system is rebooted, BulletBot will automatically be started. The startup process for this run mode, at minimum, takes 1 minute and 20 seconds from the system reboot. Checking BulletBot Run Status \u00b6 When the installers display BulletBot's run modes, it will also indicate whether a specific run mode is \"Setup to use\" or is \"Running\" in that mode. When it displays: bullet-mongo-start.service exists and is either enabled or disabled (which determines which mode BulletBot runs in), but BulletBot is not currently running. BulletBot is currently running in [run mode]. Note: Choosing the option/run mode that this is displayed on, will cause bulletbot to restart in that same run mode. Updating BulletBot \u00b6 You can use the same option that starts BulletBot, to update him. To update BulletBot, do the following: Execute the master installer: sudo bash /home/bulletbot/linux-master-installer.sh Choose option 1 in the installer menu. Follow the instructions displayed on your screen. 1. Download/update BulletBot <-- [This option updates BulletBot] 2. Run BulletBot in the background 3. Run BulletBot in the background with auto-restart (Running in this mode) 4. Stop BulletBot 5. Create new/update BulletBot config file 6. Stop and exit script Info For a more in-depth look on how BulletBot is updated, can be read in the In-Depth Explanations wiki. Other Information \u00b6 When BulletBot is running in the background with auto-restart, the installers can send a report via postfix/sendmail on BulletBot's startup status. The report lists whether or not BulletBot was successfully started, the exit status of essential services, and the startup logs of three services that can be used to help identify errors that might have occurred during BulletBot's startup. To learn how to set up this feature, follow this guide .","title":"Linux"},{"location":"Setup-Guides/Production/Linux-Prod-Setup-Guide/#linux-production-setup-guide","text":"This setup guide will instruct and explain the process in which BulletBot is set up on a Linux based distribution. The majority of the setup is taken care of by the installers, which will automate the installation and set up of the prerequisites. That said, there is a small portion of this guide that requires manual set up. If you are doing dev work on BulletBot or just want to set him up manually, please follow the Linux Dev Setup Guide .","title":"Linux Production Setup Guide"},{"location":"Setup-Guides/Production/Linux-Prod-Setup-Guide/#officially-supported-linux-distributions","text":"Below is a list of Linux Distributions that BulletBot is officially supported on. Distributions Distro Versions Architecture Ubuntu 16.04 18.04 64 bit - (ARM64 not supported) Debian 9 10 64 bit RHEL 7 8 64 bit CentOS 7 8 64 bit","title":"Officially Supported Linux Distributions"},{"location":"Setup-Guides/Production/Linux-Prod-Setup-Guide/#versions-of-mongodb-and-nodejs-installed","text":"These are the versions of MongoDB and Node.js that are installed via the installers: MongoDB: Version 4.2.x Node.js: Version 14.x","title":"Versions of MongoDB and Node.js Installed"},{"location":"Setup-Guides/Production/Linux-Prod-Setup-Guide/#getting-started","text":"To start the setup process, first download the master installer: cd ~/ && wget -N https://raw.githubusercontent.com/CodeBullet-Community/BulletBot/release/linux-master-installer.sh && sudo chmod +x linux-master-installer.sh Execute the master installer using sudo bash linux-master-installer.sh , then download BulletBot via option 1 in the installer menu.","title":"Getting Started"},{"location":"Setup-Guides/Production/Linux-Prod-Setup-Guide/#running-the-master-installer-for-the-first-time","text":"When running the master installer for the first time, a system user called bulletbot will be created (see the In-Depth Explanations wiki for more info). All code used by/for BulletBot will then be moved into /home/bulletbot .","title":"Running the Master Installer for the First Time"},{"location":"Setup-Guides/Production/Linux-Prod-Setup-Guide/#setting-up-and-installing-prerequisites","text":"The installers automatically detect whether or not the prerequisites have been installed or set up. If it detects that some or all have not been installed/set up, you'll be prompt a menu that looks similar to the one below: The menu will indicate whether or not a particular prerequisite is installed/set up. To install a missing prerequisite, enter the number corresponding to that option. Below, you will find information on what each option (excluding options 1 and 6) does and any additional or essential information associated with the option in question.","title":"Setting Up and Installing Prerequisites"},{"location":"Setup-Guides/Production/Linux-Prod-Setup-Guide/#2-install-mongodb","text":"Option 2 installs, enables, and start MongoDB. It is important to know that it does NOT set up the MongoDB settings document . The settings document can be added to the database after all the other prerequisites have been installed/set up but must be taken care of before running BulletBot.","title":"2. Install MongoDB"},{"location":"Setup-Guides/Production/Linux-Prod-Setup-Guide/#3-install-nodejs-will-also-perform-the-actions-of-option-4","text":"Option 3 installs Node.js, node, and npm. As you might have read in the description of this option, it will also install the required packages and dependencies that would otherwise be installed via option 4.","title":"3. Install Node.js (will also perform the actions of option 4)"},{"location":"Setup-Guides/Production/Linux-Prod-Setup-Guide/#4-install-required-packages-and-dependencies","text":"Option 4 installs the required packages and dependencies in a folder called node_modules in /home/bulletbot . Because option 3 already takes care of this, it is unlikely that you'll need to use this option, but is provided as a failsafe, just in case something happens to the packages and dependencies.","title":"4. Install required packages and dependencies"},{"location":"Setup-Guides/Production/Linux-Prod-Setup-Guide/#5-set-up-bulletbot-config-file","text":"Option 5 requires you to enter information such as the bot key, MongoDB URL, and so on. This information will be placed into BulletBot's configuration file ( bot-config.json ). First and foremost, if you haven't already created an application/bot , do so now. You'll need the bot key that is generated when setting up BulletBot's config file. Once you have done this, you can continue and set up the config file.","title":"5. Set up BulletBot config file"},{"location":"Setup-Guides/Production/Linux-Prod-Setup-Guide/#51-setting-up-bot-configjson-without-mongodb-authentication","text":"If you prefer to set BulletBot up WITHOUT MongoDB Authentication (which is not recommended), configurations for the config file are rather straight forward. Enter bot token: The bot token should look similar to: 1h90B4mpNDU5Mzg24jsmNTQ0.X1m.pJ-Rrgz-1OY-3iIdaynmLiGwqErAoIc . For help on finding and coping the bot token for your application, follow this guide . Enter the MongoDB URL (i.e. mongodb://localhost:[port]): If you don't plan on doing anything fancy with MongoDB (i.e., replication, etc.), you can leave this field blank, and the default MongoDB URL ( mongodb://localhost:27017 ) will automatically be used. Though if you plan to do some advanced things with MongoDB, use this link to help you properly configure the URL. Enter the MongoDB URL suffix (i.e. ?authSource=admin): Similar to field 2, unless you are doing some fancy stuff with MongoDB, you can leave this field blank. Enter the Google API Key: The Google API Key should look similar to: PaTZgFgtywVH6FFq8A5W3gSvT5f15SObwZj29Ia0 For help on creating a Google API Key, follow the instructions in this guide . Note that if you leave this field empty, you will not be able to use any services and commands that rely on Google services (i.e., webhooks). Here is an example of what it might look like:","title":"5.1. Setting Up bot-config.json WITHOUT MongoDB Authentication"},{"location":"Setup-Guides/Production/Linux-Prod-Setup-Guide/#52-setting-up-bot-configjson-with-mongodb-authentication","text":"If you want to use authentication in combination with MongoDB (which is highly recommended), the configurations for the config file will be a little different compared to if you were to use MongoDB without authentication. Fields 1 and 4 Please refer above for information on fields 1 and 4, as they are the same no matter if authentication is enabled or disabled. N/A Enter the MongoDB URL (i.e. mongodb://localhost:[port]): When using authentication, this field cannot be left empty. At the bare minimum, you must enter mongodb://bulletbot:[bulletbot MongoDB password]@localhost:[port] . More can be added to the URL, but what is shown is the bare minimum for what the suffix can be. Replace [bulletbot MongoDB password] with a password that you'll be giving the bulletbot user when setting up MongoDB Authentication . Replace [port] with the port number that MongoDB/mongod.service will be using (default port is 27017 ). Please note that if you are using a firewall, you'll need to allow incoming traffic through the port that mongod.service will use. If you plan on doing some advanced things with MongoDB, use this link to help you properly configure the URL. Enter the MongoDB URL suffix (i.e. ?authSource=admin): Similar to field 2, this field cannot be left empty. At the bare minimum, you must enter ?authSource=admin . More can be added to the suffix, but what is shown is the bare minimum for what the suffix can be. N/A Here is an example of what it might look like:","title":"5.2. Setting Up bot-config.json WITH MongoDB Authentication"},{"location":"Setup-Guides/Production/Linux-Prod-Setup-Guide/#53-webhooks","text":"By default, webhooks run on port 8000. So if you have a firewall running, make sure that you open port 8000. Please note that if your public IP Address is not static, it will not be possible to use webhooks.","title":"5.3 Webhooks"},{"location":"Setup-Guides/Production/Linux-Prod-Setup-Guide/#setting-up-mongodb","text":"At this point, MongoDB should already be installed, enabled, and running. Below are instructions on how to change the default port MongoDB uses (optional), add the MongoDB settings document (required), and set up MongoDB Authentication (optional).","title":"Setting Up MongoDB"},{"location":"Setup-Guides/Production/Linux-Prod-Setup-Guide/#changing-mongodbs-default-port","text":"MongoDB uses port 27017 by default. If you want to change what port MongoDB runs on, you will need to modify its config file. Follow the instructions below to change the port MongoDB runs on: Open /etc/mongod.conf with root privilege, using your favorite editor. Navigate to the line containing something similar to port: 27017 Replace 27017 with the port number that you would like MongoDB to run on. Save and exit the file. Restart mongod.service: sudo systemctl restart mongod","title":"Changing MongoDB's Default Port"},{"location":"Setup-Guides/Production/Linux-Prod-Setup-Guide/#adding-the-mongodb-settings-document","text":"BulletBot needs a settings document placed in the database to work. This document is similar to bot-config.json , but whereas the JSON file requires BulletBot to be a restart for any changes to be applied, changes to the settings document take immediate effect. Before adding the document, make sure to add your Discord user ID to the botMasters field. The ID should be a long string of numbers similar to 516213540576277819 . Follow the instructions below to add the settings document to the MongoDB database: Open the mongo shell: mongo --port [port] Switch to the settings collection: use settings Insert the following document: db.settings.insert( { \"prefix\" : \"?!\" , \"presence\" : { \"status\" : \"online\" , \"game\" : { \"name\" : \"?!help\" , \"type\" : \"Playing\" } }, \"embedColors\" : { \"default\" : 8311585 , \"help\" : 8311585 , \"neutral\" : 4868682 , \"negative\" : 15805477 , \"warn\" : 16086051 , \"positive\" : 8311585 }, \"botMasters\" : [ \"[user ID of bot masters]\" ], \"commands\" : { \"animal\" : { \"apis\" : { \"cat\" : \"https://some-random-api.ml/img/cat\" , \"dog\" : \"https://some-random-api.ml/img/dog\" , \"fox\" : \"https://some-random-api.ml/img/fox\" , \"panda\" : \"https://some-random-api.ml/img/panda\" , \"red-panda\" : \"https://some-random-api.ml/img/red_panda\" , \"bird\" : \"https://some-random-api.ml/img/birb\" , \"pikachu\" : \"https://some-random-api.ml/pikachuimg\" } }, \"purge\" : { \"maxMessages\" : 1000 } } } ) Something similar to WriteResult({ \"nInserted\" : 1 }) will be printed to the screen if the settings were successfully added to the database. Exit the mongo shell: exit","title":"Adding the MongoDB Settings Document"},{"location":"Setup-Guides/Production/Linux-Prod-Setup-Guide/#adding-authentication","text":"Enabling authentication causes MongoDB to require all users who connect to the database to authenticate/login to an existing user in the database. It is highly recommended that you enable this feature so that the cluster is secure and so that you can remotely access it, for example, with MongoDB Compass . Info For instructions on how to use/setup MongoDB Compass, follow this guide . Follow the instructions below to enable authentication. Make sure to replace [admin password] with a password you'll remember, and [bulletbot password] with the password you used when setting up BulletBot's config file. Open mongo shell: mongo --port [port] Switch to the admin database, which stores all users: use admin Create an admin user: db.createUser( { user: \"admin\" , pwd: \"[admin password]\" , roles: [ { \"role\" : \"userAdminAnyDatabase\" , \"db\" : \"admin\" } , { \"role\" : \"readWriteAnyDatabase\" , \"db\" : \"admin\" } , { \"role\" : \"clusterAdmin\" , \"db\" : \"admin\" } ] } ) Create a user for BulletBot: db.createUser( { user: \"bulletbot\" , pwd: \"[bulletbot password]\" , roles: [ { \"role\" : \"readWrite\" , \"db\" : \"main\" } , { \"role\" : \"readWrite\" , \"db\" : \"webhooks\" } , { \"role\" : \"readWrite\" , \"db\" : \"mStats\" } , { \"role\" : \"read\" , \"db\" : \"settings\" } ] } ) Check if both users were added with db.getUsers() . The output should look like this: [ { \"_id\" : \"admin.admin\" , \"userId\" : UUID( \"[some id]\" ) , \"user\" : \"admin\" , \"db\" : \"admin\" , \"roles\" : [ { \"role\" : \"userAdminAnyDatabase\" , \"db\" : \"admin\" }, { \"role\" : \"readWriteAnyDatabase\" , \"db\" : \"admin\" }, { \"role\" : \"clusterAdmin\" , \"db\" : \"admin\" } ], \"mechanisms\" : [ \"SCRAM-SHA-1\" , \"SCRAM-SHA-256\" ] }, { \"_id\" : \"admin.bulletbot\" , \"userId\" : UUID( \"[some id]\" ) , \"user\" : \"bulletbot\" , \"db\" : \"admin\" , \"roles\" : [ { \"role\" : \"readWrite\" , \"db\" : \"main\" }, { \"role\" : \"readWrite\" , \"db\" : \"webhooks\" }, { \"role\" : \"readWrite\" , \"db\" : \"mStats\" }, { \"role\" : \"read\" , \"db\" : \"settings\" } ], \"mechanisms\" : [ \"SCRAM-SHA-1\" , \"SCRAM-SHA-256\" ] } ] Exit the mongo shell: exit If you have the cluster running with replication enabled, you will have to add a key file. To do this, do the following: openssl rand -base64 756 > [ path to key file ] chmod 400 [ path to key file ] chown mongodb:root [ path to key file ] It's recommended that the key file is placed in the same directory as the mongod.conf file (default at /etc/mongod.conf ) and is named mongod.key . You will also have to copy the key file to the other servers and repeat the chmod and chown command. Open /etc/mongod.conf with root privilege, using your favorite editor, and add the following: security : authorization : \"enabled\" keyFile : \"[path to key file]\" ## (only add this line when replication is enabled) If there is already a security property, just append the authorization property to it or change it to enabled. If replication is enabled, you will have to change the same stuff in the other config files on the other servers. Restart mongod.service: sudo systemctl restart mongod Note In this guide, we only add the admin and bulletbot users. If you want, you can add other users to it, which shouldn't affect the bot.","title":"Adding Authentication"},{"location":"Setup-Guides/Production/Linux-Prod-Setup-Guide/#running-bulletbot","text":"Info A more in-depth look at the run modes can be read in the In-Depth Explanations wiki.","title":"Running BulletBot"},{"location":"Setup-Guides/Production/Linux-Prod-Setup-Guide/#run-modes","text":"BulletBot can be run in two different modes: Run BulletBot in the background This mode runs BulletBot in the background of the system. If the system is rebooted, BulletBot will NOT be started on system reboot. Run BulletBot in the background with auto-restart This mode runs BulletBot in the background of the system. Though unlike the first run mode, if the system is rebooted, BulletBot will automatically be started. The startup process for this run mode, at minimum, takes 1 minute and 20 seconds from the system reboot.","title":"Run Modes"},{"location":"Setup-Guides/Production/Linux-Prod-Setup-Guide/#checking-bulletbot-run-status","text":"When the installers display BulletBot's run modes, it will also indicate whether a specific run mode is \"Setup to use\" or is \"Running\" in that mode. When it displays: bullet-mongo-start.service exists and is either enabled or disabled (which determines which mode BulletBot runs in), but BulletBot is not currently running. BulletBot is currently running in [run mode]. Note: Choosing the option/run mode that this is displayed on, will cause bulletbot to restart in that same run mode.","title":"Checking BulletBot Run Status"},{"location":"Setup-Guides/Production/Linux-Prod-Setup-Guide/#updating-bulletbot","text":"You can use the same option that starts BulletBot, to update him. To update BulletBot, do the following: Execute the master installer: sudo bash /home/bulletbot/linux-master-installer.sh Choose option 1 in the installer menu. Follow the instructions displayed on your screen. 1. Download/update BulletBot <-- [This option updates BulletBot] 2. Run BulletBot in the background 3. Run BulletBot in the background with auto-restart (Running in this mode) 4. Stop BulletBot 5. Create new/update BulletBot config file 6. Stop and exit script Info For a more in-depth look on how BulletBot is updated, can be read in the In-Depth Explanations wiki.","title":"Updating BulletBot"},{"location":"Setup-Guides/Production/Linux-Prod-Setup-Guide/#other-information","text":"When BulletBot is running in the background with auto-restart, the installers can send a report via postfix/sendmail on BulletBot's startup status. The report lists whether or not BulletBot was successfully started, the exit status of essential services, and the startup logs of three services that can be used to help identify errors that might have occurred during BulletBot's startup. To learn how to set up this feature, follow this guide .","title":"Other Information"},{"location":"dev-documentation/","text":"Dev Documentation \u00b6 This is the documentation for contributors. It contains the code structure and MongoDB document definitions. Originally this was in a Miro board, but we decided to move it here so there is a proper version control. Index \u00b6 Code / File / Folder Structure Databases Doc Definitions main Database mStats Database webhooks Database settings Database","title":"Readme"},{"location":"dev-documentation/#dev-documentation","text":"This is the documentation for contributors. It contains the code structure and MongoDB document definitions. Originally this was in a Miro board, but we decided to move it here so there is a proper version control.","title":"Dev Documentation"},{"location":"dev-documentation/#index","text":"Code / File / Folder Structure Databases Doc Definitions main Database mStats Database webhooks Database settings Database","title":"Index"},{"location":"dev-documentation/structure/","text":"Code / File / Folder Structure \u00b6 This file contains a simple overview of what code for what purpose is placed where and how some of the folder structure needs to be. . \u251c\u2500\u2500 media - folder that contains images for BulletBot | \u251c\u2500\u2500 out - (created when TS code is compiled) output dir with js files | \u251c\u2500\u2500 _src - contains entire source code of BulletBot | | | \u251c\u2500\u2500 _commands - folder with all commands | | \u251c\u2500\u2500 [category name] - category folder with commands | | \u2514\u2500\u2500 [command name].ts - command template used on all newer commands | | | \u251c\u2500\u2500 filters - folder with all filters (same structure as commands) | | | \u251c\u2500\u2500 _database - folder containing code that directly accesses the database | | \u251c\u2500\u2500 caseLogger.ts - contains class that manages cases on db | | \u251c\u2500\u2500 database.ts - contains main simple database interface | | \u251c\u2500\u2500 logger.ts - contains class that logs normal server logs | | \u251c\u2500\u2500 mStats.ts - management statistics module | | \u251c\u2500\u2500 pActions.ts - pending actions module | | \u2514\u2500\u2500 schemas.ts - contains all document definitions for the database | | | \u251c\u2500\u2500 _utils - folder containing functions used everywhere | | \u251c\u2500\u2500 filters.ts - contains util functions for filters | | \u251c\u2500\u2500 messages.ts - contains util functions related to messages | | \u251c\u2500\u2500 parsers.ts - contains all parser functions | | \u251c\u2500\u2500 permissions.ts - contains permission functions | | \u2514\u2500\u2500 time.ts - contains util functions and definitions related to time | | | \u251c\u2500\u2500 bot-config.json - (put there by you) contains start config of BulletBot | \u251c\u2500\u2500 catcher.ts - catcher for webhooks | \u251c\u2500\u2500 commands.ts - loads and holds all commands | \u251c\u2500\u2500 filter.ts - loads and holds all filter | \u251c\u2500\u2500 index.ts - start bot contains main bot class | \u251c\u2500\u2500 megalogger.ts - holds megalogger class | \u2514\u2500\u2500 youtube.ts - contains code for YouTube webhooks | \u251c\u2500\u2500 package.json - basically node.js config file \u2514\u2500\u2500 tsconfig.json - TypeScript compiler config file","title":"Structure"},{"location":"dev-documentation/structure/#code-file-folder-structure","text":"This file contains a simple overview of what code for what purpose is placed where and how some of the folder structure needs to be. . \u251c\u2500\u2500 media - folder that contains images for BulletBot | \u251c\u2500\u2500 out - (created when TS code is compiled) output dir with js files | \u251c\u2500\u2500 _src - contains entire source code of BulletBot | | | \u251c\u2500\u2500 _commands - folder with all commands | | \u251c\u2500\u2500 [category name] - category folder with commands | | \u2514\u2500\u2500 [command name].ts - command template used on all newer commands | | | \u251c\u2500\u2500 filters - folder with all filters (same structure as commands) | | | \u251c\u2500\u2500 _database - folder containing code that directly accesses the database | | \u251c\u2500\u2500 caseLogger.ts - contains class that manages cases on db | | \u251c\u2500\u2500 database.ts - contains main simple database interface | | \u251c\u2500\u2500 logger.ts - contains class that logs normal server logs | | \u251c\u2500\u2500 mStats.ts - management statistics module | | \u251c\u2500\u2500 pActions.ts - pending actions module | | \u2514\u2500\u2500 schemas.ts - contains all document definitions for the database | | | \u251c\u2500\u2500 _utils - folder containing functions used everywhere | | \u251c\u2500\u2500 filters.ts - contains util functions for filters | | \u251c\u2500\u2500 messages.ts - contains util functions related to messages | | \u251c\u2500\u2500 parsers.ts - contains all parser functions | | \u251c\u2500\u2500 permissions.ts - contains permission functions | | \u2514\u2500\u2500 time.ts - contains util functions and definitions related to time | | | \u251c\u2500\u2500 bot-config.json - (put there by you) contains start config of BulletBot | \u251c\u2500\u2500 catcher.ts - catcher for webhooks | \u251c\u2500\u2500 commands.ts - loads and holds all commands | \u251c\u2500\u2500 filter.ts - loads and holds all filter | \u251c\u2500\u2500 index.ts - start bot contains main bot class | \u251c\u2500\u2500 megalogger.ts - holds megalogger class | \u2514\u2500\u2500 youtube.ts - contains code for YouTube webhooks | \u251c\u2500\u2500 package.json - basically node.js config file \u2514\u2500\u2500 tsconfig.json - TypeScript compiler config file","title":"Code / File / Folder Structure"},{"location":"dev-documentation/database/mStats/","text":"mStats Database Document Definitions \u00b6 This file contains the definitions for all documents in all collections in the mStats database. The name of the collection is in the header. MStats is short for management statistics. Base Document \u00b6 This document is the base of all documents in the allTime , daily and hourly collections. Each collection adds other stuff to it, but always the same base document. { messagesReceived : number ; // all messages received messagesSend : number ; // all messages send logs : number ; // total logs created guildsJoined : number ; guildsLeft : number ; guildsTotal : number ; errorsTotal : number ; bugs : number ; // total bugs reported botSuggestions : number ; // total bot suggestions made commandTotal : number ; // total used commands : { // key is command name, usage data [ key : string ] : { _error : number ; // total errors caught _resp : number ; //response time in ms (when first reply send, so ping doesn't get counted) _main : number ; // main command // subcommand like add, rem, list [ key : string ] : number ; } }; filters : { // key is filter name, catch data [ key : string ] : number ; // number of messages filtered }; webhooks : { // key is service name [ key : string ] : { total : number ; // how many exist created : number ; // number of webhooks created changed : number ; // number of webhooks changed deleted : number ; // number of webhooks deleted } }; ping : { clientAPI : number ; // client ping cluster : number ; // cluster ping }; megalog : { // how many times each function is enabled enabled : { channelCreate : number ; channelDelete : number ; channelUpdate : number ; ban : number ; unban : number ; memberJoin : number ; memberLeave : number ; nicknameChange : number ; memberRolesChange : number ; guildNameChange : number ; messageDelete : number ; attachmentCache : number ; messageEdit : number ; reactionAdd : number ; reactionRemove : number ; roleCreate : number ; roleDelete : number ; roleUpdate : number ; voiceTranfer : number ; voiceMute : number ; voiceDeaf : number ; }; // how many things each function has logged logged : { channelCreate : number ; channelDelete : number ; channelUpdate : number ; ban : number ; unban : number ; memberJoin : number ; memberLeave : number ; nicknameChange : number ; memberRolesChange : number ; guildNameChange : number ; messageDelete : number ; attachmentCache : number ; messageEdit : number ; reactionAdd : number ; reactionRemove : number ; roleCreate : number ; roleDelete : number ; roleUpdate : number ; voiceTranfer : number ; voiceMute : number ; voiceDeaf : number ; }; } } allTime Collection Document \u00b6 only has one doc with the base document as base { from : number ; // from timestamp to : number ; // last updated } daily Collection Document \u00b6 one document for each day with the base document as base { day : number ; // timestamp 00:00 of day } hourly Collection Document \u00b6 one document for each hour of one day with the base document as base { day : number ; // timestamp 00:00 of day hour : number ; // hour of day 0-23 } errors Collection Document \u00b6 One document for each error (same errors count as one error) { first : number ; // timestamp of first occurrence last : number ; // timestamp of last occurrence md5 : hash ; // md5 hash to check if the error is the same count : number ; // how many times it was thrown error : any ; // error object } bugs Collection Document \u00b6 One document for each bug. { guild? : string ; // guild ID where it was reported (optional) user : string ; // user ID which reported it bug : string ; // bug description } suggestions Collection Document \u00b6 One document for each suggestion. { guild? : string ; // guild ID where it was suggested (optional) user : string ; // user ID which suggested it suggestion : string ; // suggestion description }","title":"mStats"},{"location":"dev-documentation/database/mStats/#mstats-database-document-definitions","text":"This file contains the definitions for all documents in all collections in the mStats database. The name of the collection is in the header. MStats is short for management statistics.","title":"mStats Database Document Definitions"},{"location":"dev-documentation/database/mStats/#base-document","text":"This document is the base of all documents in the allTime , daily and hourly collections. Each collection adds other stuff to it, but always the same base document. { messagesReceived : number ; // all messages received messagesSend : number ; // all messages send logs : number ; // total logs created guildsJoined : number ; guildsLeft : number ; guildsTotal : number ; errorsTotal : number ; bugs : number ; // total bugs reported botSuggestions : number ; // total bot suggestions made commandTotal : number ; // total used commands : { // key is command name, usage data [ key : string ] : { _error : number ; // total errors caught _resp : number ; //response time in ms (when first reply send, so ping doesn't get counted) _main : number ; // main command // subcommand like add, rem, list [ key : string ] : number ; } }; filters : { // key is filter name, catch data [ key : string ] : number ; // number of messages filtered }; webhooks : { // key is service name [ key : string ] : { total : number ; // how many exist created : number ; // number of webhooks created changed : number ; // number of webhooks changed deleted : number ; // number of webhooks deleted } }; ping : { clientAPI : number ; // client ping cluster : number ; // cluster ping }; megalog : { // how many times each function is enabled enabled : { channelCreate : number ; channelDelete : number ; channelUpdate : number ; ban : number ; unban : number ; memberJoin : number ; memberLeave : number ; nicknameChange : number ; memberRolesChange : number ; guildNameChange : number ; messageDelete : number ; attachmentCache : number ; messageEdit : number ; reactionAdd : number ; reactionRemove : number ; roleCreate : number ; roleDelete : number ; roleUpdate : number ; voiceTranfer : number ; voiceMute : number ; voiceDeaf : number ; }; // how many things each function has logged logged : { channelCreate : number ; channelDelete : number ; channelUpdate : number ; ban : number ; unban : number ; memberJoin : number ; memberLeave : number ; nicknameChange : number ; memberRolesChange : number ; guildNameChange : number ; messageDelete : number ; attachmentCache : number ; messageEdit : number ; reactionAdd : number ; reactionRemove : number ; roleCreate : number ; roleDelete : number ; roleUpdate : number ; voiceTranfer : number ; voiceMute : number ; voiceDeaf : number ; }; } }","title":"Base Document"},{"location":"dev-documentation/database/mStats/#alltime-collection-document","text":"only has one doc with the base document as base { from : number ; // from timestamp to : number ; // last updated }","title":"allTime Collection Document"},{"location":"dev-documentation/database/mStats/#daily-collection-document","text":"one document for each day with the base document as base { day : number ; // timestamp 00:00 of day }","title":"daily Collection Document"},{"location":"dev-documentation/database/mStats/#hourly-collection-document","text":"one document for each hour of one day with the base document as base { day : number ; // timestamp 00:00 of day hour : number ; // hour of day 0-23 }","title":"hourly Collection Document"},{"location":"dev-documentation/database/mStats/#errors-collection-document","text":"One document for each error (same errors count as one error) { first : number ; // timestamp of first occurrence last : number ; // timestamp of last occurrence md5 : hash ; // md5 hash to check if the error is the same count : number ; // how many times it was thrown error : any ; // error object }","title":"errors Collection Document"},{"location":"dev-documentation/database/mStats/#bugs-collection-document","text":"One document for each bug. { guild? : string ; // guild ID where it was reported (optional) user : string ; // user ID which reported it bug : string ; // bug description }","title":"bugs Collection Document"},{"location":"dev-documentation/database/mStats/#suggestions-collection-document","text":"One document for each suggestion. { guild? : string ; // guild ID where it was suggested (optional) user : string ; // user ID which suggested it suggestion : string ; // suggestion description }","title":"suggestions Collection Document"},{"location":"dev-documentation/database/main/","text":"main Database Document Definitions \u00b6 This file contains the definitions for all documents in all collections in the main database. The name of the collection is in the header. guilds Collection Document \u00b6 one document for each guild { guild : string ; //guild id logChannel : string ; // log channel id logs : []; // oldest to newest log document id staff : string ; // staff document id cases : number ; // total number of cases webhooks : { // key is service name [ key : string ] : string []; // webhook id } locks : { // channel id [ key : string ] : { until ?: number ; allowOverwrites : string []; neutralOverwrites : string []; }; }; // defines where commands can be used commandChannels : { mode : boolean ; // false: exclude, true: include channels : string []; } } staff Collection Document \u00b6 one document for each guild { guild : string ; admins : { roles : string []; // role ids users : string []; // user ids }; mods : { roles : string []; // role ids users : string []; // user ids }; immune : { roles : string []; // role ids users : string []; // user ids }; } prefix Collection Document \u00b6 one document for each guild { guild : string ; // guild id prefix : string ; // prefix } commands Collection Document \u00b6 one document for each guild { guild : string ; // guild id commands : { // key is command name [ key : string ] : { _enabled : boolean ; // if enabled // allowed is the same as commandChannelRules in guild _allowed : [ string , boolean ]; // custom settings of the command [ key : string ] : any ; } } } filters Collection Document \u00b6 one document for each guild { guild : string ; // guild id filters : { // key is filter name [ key : string ] : { _enabled : boolean ; // if enabled // custom settings of the filter [ key : string ] : any ; } } } logs Collection Document \u00b6 one document for each log entry { guild : string ; // guild id action : number ; // action id mod : string ; // user id timestamp : number ; // timestamp info : info ; // info depending on action } Log Actions Info \u00b6 action ID -> string name 0 -> staff : { type : 0 | 1 ; // add or remove rank : 'admins' | 'mods' | 'immune' ; role ?: string ; // role id user ?: string ; // user id } 1 -> webhook : { type : 0 | 1 | 2 ; // add, remove or change service : string ; // service name webhookID : string ; // document id changedChannel ?: boolean ; // if channel was changed changedMessage ?: boolean ; // if message was changed } 2 -> filter : { type : 0 | 1 ; // add, remove filter : string ; // filter name } 3 -> command : { type : 0 | 1 ; // add, remove command : string ; // command name } 4 -> prefix : { old : string ; // old prefix new : string ; // new prefix } 5 -> megalog : { type : 0 | 1 ; // add, remove functions : string []; // functions that have been added or removed channel : string ; // channel id } 6 -> megalogIgnore : { type : 0 | 1 ; // add, remove channel : string ; // channel id } commandCaches Collection Document \u00b6 can only have one document for same channel and user { channel : string ; // channel id user : string ; // user id command : string ; // actual command cache : any ; // stuff the command wants to store delete : number ; // timestamp when to delete again } users Collection Document \u00b6 one document for each user { user : string ; // userid onServer : Boolean , // whether they are still present on the server commandCooldown : { // guild id, 'dm' or 'global' [ key : string ] : { // command name [ key : string ] : number ; // timestamp until it can be used again }; }; persistentRoles : { // guild id [ key : string ] : string []; // array of role ids } accessToken : string ; // Discord access token expirationTimestamp : number ; // timestamp when access expires states : [ { hash : string ; // a random string lastUsed : number ; // when it was last used } ] } megalog Collection Document \u00b6 one document per guild { guild : string ; // guild id ignoreChannels : string []; // array of channel ids channelCreate : string ; // channel id channelDelete : string ; // channel id channelUpdate : string ; // channel id ban : string ; // channel id unban : string ; // channel id memberJoin : string ; // channel id memberLeave : string ; // channel id nicknameChange : string ; // channel id memberRolesChange : string ; // channel id guildNameChange : string ; // channel id messageDelete : string ; // channel id attachmentCache : string ; // channel id messageEdit : string ; // channel id reactionAdd : string ; // channel id reactionRemove : string ; // channel id roleCreate : string ; // channel id roleDelete : string ; // channel id roleUpdate : string ; // channel id voiceTranfer : string ; // channel id voiceMute : string ; // channel id voiceDeaf : string ; // channel id } cases Collection Document \u00b6 one doc for each case { guild : string ; // guild id caseID : number ; // case id user : string ; // user id action : 'mute' | 'unmute' | 'kick' | 'unban' | 'softban' ; // action name timestamp : number ; duration : number ; // optional in ms mod : string ; // user id reason : string ; } pActions Collection Document \u00b6 one doc for each pending action { from : number ; // when pending action was added to : number ; // when pending action should be executed action : string ; // mute, lockChannel, ban, resubWebhook info : Object ; } Pending Actions Info \u00b6 mute : { guild : string ; // guild id user : string ; // user id case : number ; // case id } ban : { guild : string ; // guild id user : string ; // user id case : number ; // case id } lockChannel : { guild : string ; // guild id channel : string ; // channel id allowOverwrites : string []; // overwrites that where originally on allow neutralOverwrites : string []; // overwrites that were originally neutral } resubWebhook : { service : 'youtube' ; // webhooks of which service need to be resubbed }","title":"main"},{"location":"dev-documentation/database/main/#main-database-document-definitions","text":"This file contains the definitions for all documents in all collections in the main database. The name of the collection is in the header.","title":"main Database Document Definitions"},{"location":"dev-documentation/database/main/#guilds-collection-document","text":"one document for each guild { guild : string ; //guild id logChannel : string ; // log channel id logs : []; // oldest to newest log document id staff : string ; // staff document id cases : number ; // total number of cases webhooks : { // key is service name [ key : string ] : string []; // webhook id } locks : { // channel id [ key : string ] : { until ?: number ; allowOverwrites : string []; neutralOverwrites : string []; }; }; // defines where commands can be used commandChannels : { mode : boolean ; // false: exclude, true: include channels : string []; } }","title":"guilds Collection Document"},{"location":"dev-documentation/database/main/#staff-collection-document","text":"one document for each guild { guild : string ; admins : { roles : string []; // role ids users : string []; // user ids }; mods : { roles : string []; // role ids users : string []; // user ids }; immune : { roles : string []; // role ids users : string []; // user ids }; }","title":"staff Collection Document"},{"location":"dev-documentation/database/main/#prefix-collection-document","text":"one document for each guild { guild : string ; // guild id prefix : string ; // prefix }","title":"prefix Collection Document"},{"location":"dev-documentation/database/main/#commands-collection-document","text":"one document for each guild { guild : string ; // guild id commands : { // key is command name [ key : string ] : { _enabled : boolean ; // if enabled // allowed is the same as commandChannelRules in guild _allowed : [ string , boolean ]; // custom settings of the command [ key : string ] : any ; } } }","title":"commands Collection Document"},{"location":"dev-documentation/database/main/#filters-collection-document","text":"one document for each guild { guild : string ; // guild id filters : { // key is filter name [ key : string ] : { _enabled : boolean ; // if enabled // custom settings of the filter [ key : string ] : any ; } } }","title":"filters Collection Document"},{"location":"dev-documentation/database/main/#logs-collection-document","text":"one document for each log entry { guild : string ; // guild id action : number ; // action id mod : string ; // user id timestamp : number ; // timestamp info : info ; // info depending on action }","title":"logs Collection Document"},{"location":"dev-documentation/database/main/#log-actions-info","text":"action ID -> string name 0 -> staff : { type : 0 | 1 ; // add or remove rank : 'admins' | 'mods' | 'immune' ; role ?: string ; // role id user ?: string ; // user id } 1 -> webhook : { type : 0 | 1 | 2 ; // add, remove or change service : string ; // service name webhookID : string ; // document id changedChannel ?: boolean ; // if channel was changed changedMessage ?: boolean ; // if message was changed } 2 -> filter : { type : 0 | 1 ; // add, remove filter : string ; // filter name } 3 -> command : { type : 0 | 1 ; // add, remove command : string ; // command name } 4 -> prefix : { old : string ; // old prefix new : string ; // new prefix } 5 -> megalog : { type : 0 | 1 ; // add, remove functions : string []; // functions that have been added or removed channel : string ; // channel id } 6 -> megalogIgnore : { type : 0 | 1 ; // add, remove channel : string ; // channel id }","title":"Log Actions Info"},{"location":"dev-documentation/database/main/#commandcaches-collection-document","text":"can only have one document for same channel and user { channel : string ; // channel id user : string ; // user id command : string ; // actual command cache : any ; // stuff the command wants to store delete : number ; // timestamp when to delete again }","title":"commandCaches Collection Document"},{"location":"dev-documentation/database/main/#users-collection-document","text":"one document for each user { user : string ; // userid onServer : Boolean , // whether they are still present on the server commandCooldown : { // guild id, 'dm' or 'global' [ key : string ] : { // command name [ key : string ] : number ; // timestamp until it can be used again }; }; persistentRoles : { // guild id [ key : string ] : string []; // array of role ids } accessToken : string ; // Discord access token expirationTimestamp : number ; // timestamp when access expires states : [ { hash : string ; // a random string lastUsed : number ; // when it was last used } ] }","title":"users Collection Document"},{"location":"dev-documentation/database/main/#megalog-collection-document","text":"one document per guild { guild : string ; // guild id ignoreChannels : string []; // array of channel ids channelCreate : string ; // channel id channelDelete : string ; // channel id channelUpdate : string ; // channel id ban : string ; // channel id unban : string ; // channel id memberJoin : string ; // channel id memberLeave : string ; // channel id nicknameChange : string ; // channel id memberRolesChange : string ; // channel id guildNameChange : string ; // channel id messageDelete : string ; // channel id attachmentCache : string ; // channel id messageEdit : string ; // channel id reactionAdd : string ; // channel id reactionRemove : string ; // channel id roleCreate : string ; // channel id roleDelete : string ; // channel id roleUpdate : string ; // channel id voiceTranfer : string ; // channel id voiceMute : string ; // channel id voiceDeaf : string ; // channel id }","title":"megalog Collection Document"},{"location":"dev-documentation/database/main/#cases-collection-document","text":"one doc for each case { guild : string ; // guild id caseID : number ; // case id user : string ; // user id action : 'mute' | 'unmute' | 'kick' | 'unban' | 'softban' ; // action name timestamp : number ; duration : number ; // optional in ms mod : string ; // user id reason : string ; }","title":"cases Collection Document"},{"location":"dev-documentation/database/main/#pactions-collection-document","text":"one doc for each pending action { from : number ; // when pending action was added to : number ; // when pending action should be executed action : string ; // mute, lockChannel, ban, resubWebhook info : Object ; }","title":"pActions Collection Document"},{"location":"dev-documentation/database/main/#pending-actions-info","text":"mute : { guild : string ; // guild id user : string ; // user id case : number ; // case id } ban : { guild : string ; // guild id user : string ; // user id case : number ; // case id } lockChannel : { guild : string ; // guild id channel : string ; // channel id allowOverwrites : string []; // overwrites that where originally on allow neutralOverwrites : string []; // overwrites that were originally neutral } resubWebhook : { service : 'youtube' ; // webhooks of which service need to be resubbed }","title":"Pending Actions Info"},{"location":"dev-documentation/database/settings/","text":"settings Database Document Definitions \u00b6 This file contains the definitions for all documents in all collections in the settings database. This database is kind of special in that it has only one collection with one document in it. settings Collection Document \u00b6 only one document in collection { prefix : string ; // default prefix presence : PresenceData ; // presence data defined in discord.js docs // colors of different embed colors embedColors : { default : number ; help : number ; neutral : number ; bad : number ; warn : number ; positive : number ; }; botMasters : [ string ]; // user ids of bot masters // command settings commands : { // key is command name [ key : string ] : { [ key : string ] : any ; }; }; // filter settings filters : { // key is filter name [ key : string ] : { [ key : string ] : any ; } } }","title":"settings"},{"location":"dev-documentation/database/settings/#settings-database-document-definitions","text":"This file contains the definitions for all documents in all collections in the settings database. This database is kind of special in that it has only one collection with one document in it.","title":"settings Database Document Definitions"},{"location":"dev-documentation/database/settings/#settings-collection-document","text":"only one document in collection { prefix : string ; // default prefix presence : PresenceData ; // presence data defined in discord.js docs // colors of different embed colors embedColors : { default : number ; help : number ; neutral : number ; bad : number ; warn : number ; positive : number ; }; botMasters : [ string ]; // user ids of bot masters // command settings commands : { // key is command name [ key : string ] : { [ key : string ] : any ; }; }; // filter settings filters : { // key is filter name [ key : string ] : { [ key : string ] : any ; } } }","title":"settings Collection Document"},{"location":"dev-documentation/database/webhooks/","text":"webhooks Database Document Definitions \u00b6 This file contains the definitions for all documents in all collections in the webhooks database. Each service that BulletBot has webhooks from has its own collection (right now only youtube ). youtube Collection Document \u00b6 one document per webhook { feed : string ; // youtube channel id guild : string ; // guild id channel : string ; // channel id message : string ; // message }","title":"webhooks"},{"location":"dev-documentation/database/webhooks/#webhooks-database-document-definitions","text":"This file contains the definitions for all documents in all collections in the webhooks database. Each service that BulletBot has webhooks from has its own collection (right now only youtube ).","title":"webhooks Database Document Definitions"},{"location":"dev-documentation/database/webhooks/#youtube-collection-document","text":"one document per webhook { feed : string ; // youtube channel id guild : string ; // guild id channel : string ; // channel id message : string ; // message }","title":"youtube Collection Document"}]}